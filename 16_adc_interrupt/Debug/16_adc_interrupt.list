
16_adc_interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004ec  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080005ac  080005b4  000105b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080005ac  080005ac  000105b4  2**0
                  CONTENTS
  4 .ARM          00000000  080005ac  080005ac  000105b4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080005ac  080005b4  000105b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005ac  080005ac  000105ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080005b0  080005b0  000105b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000105b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080005b4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080005b4  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000105b4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000105dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000bed  00000000  00000000  0001061f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000045f  00000000  00000000  0001120c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000f8  00000000  00000000  00011670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000a9  00000000  00000000  00011768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000130a3  00000000  00000000  00011811  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000117d  00000000  00000000  000248b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0006635c  00000000  00000000  00025a31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000270  00000000  00000000  0008bd90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  0008c000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000000 	.word	0x20000000
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08000594 	.word	0x08000594

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000004 	.word	0x20000004
 8000104:	08000594 	.word	0x08000594

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	0002      	movs	r2, r0
 8000228:	1dfb      	adds	r3, r7, #7
 800022a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800022c:	1dfb      	adds	r3, r7, #7
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	2b7f      	cmp	r3, #127	; 0x7f
 8000232:	d809      	bhi.n	8000248 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000234:	1dfb      	adds	r3, r7, #7
 8000236:	781b      	ldrb	r3, [r3, #0]
 8000238:	001a      	movs	r2, r3
 800023a:	231f      	movs	r3, #31
 800023c:	401a      	ands	r2, r3
 800023e:	4b04      	ldr	r3, [pc, #16]	; (8000250 <__NVIC_EnableIRQ+0x30>)
 8000240:	2101      	movs	r1, #1
 8000242:	4091      	lsls	r1, r2
 8000244:	000a      	movs	r2, r1
 8000246:	601a      	str	r2, [r3, #0]
  }
}
 8000248:	46c0      	nop			; (mov r8, r8)
 800024a:	46bd      	mov	sp, r7
 800024c:	b002      	add	sp, #8
 800024e:	bd80      	pop	{r7, pc}
 8000250:	e000e100 	.word	0xe000e100

08000254 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000254:	b590      	push	{r4, r7, lr}
 8000256:	b083      	sub	sp, #12
 8000258:	af00      	add	r7, sp, #0
 800025a:	0002      	movs	r2, r0
 800025c:	6039      	str	r1, [r7, #0]
 800025e:	1dfb      	adds	r3, r7, #7
 8000260:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000262:	1dfb      	adds	r3, r7, #7
 8000264:	781b      	ldrb	r3, [r3, #0]
 8000266:	2b7f      	cmp	r3, #127	; 0x7f
 8000268:	d828      	bhi.n	80002bc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800026a:	4a2f      	ldr	r2, [pc, #188]	; (8000328 <__NVIC_SetPriority+0xd4>)
 800026c:	1dfb      	adds	r3, r7, #7
 800026e:	781b      	ldrb	r3, [r3, #0]
 8000270:	b25b      	sxtb	r3, r3
 8000272:	089b      	lsrs	r3, r3, #2
 8000274:	33c0      	adds	r3, #192	; 0xc0
 8000276:	009b      	lsls	r3, r3, #2
 8000278:	589b      	ldr	r3, [r3, r2]
 800027a:	1dfa      	adds	r2, r7, #7
 800027c:	7812      	ldrb	r2, [r2, #0]
 800027e:	0011      	movs	r1, r2
 8000280:	2203      	movs	r2, #3
 8000282:	400a      	ands	r2, r1
 8000284:	00d2      	lsls	r2, r2, #3
 8000286:	21ff      	movs	r1, #255	; 0xff
 8000288:	4091      	lsls	r1, r2
 800028a:	000a      	movs	r2, r1
 800028c:	43d2      	mvns	r2, r2
 800028e:	401a      	ands	r2, r3
 8000290:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000292:	683b      	ldr	r3, [r7, #0]
 8000294:	019b      	lsls	r3, r3, #6
 8000296:	22ff      	movs	r2, #255	; 0xff
 8000298:	401a      	ands	r2, r3
 800029a:	1dfb      	adds	r3, r7, #7
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	0018      	movs	r0, r3
 80002a0:	2303      	movs	r3, #3
 80002a2:	4003      	ands	r3, r0
 80002a4:	00db      	lsls	r3, r3, #3
 80002a6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002a8:	481f      	ldr	r0, [pc, #124]	; (8000328 <__NVIC_SetPriority+0xd4>)
 80002aa:	1dfb      	adds	r3, r7, #7
 80002ac:	781b      	ldrb	r3, [r3, #0]
 80002ae:	b25b      	sxtb	r3, r3
 80002b0:	089b      	lsrs	r3, r3, #2
 80002b2:	430a      	orrs	r2, r1
 80002b4:	33c0      	adds	r3, #192	; 0xc0
 80002b6:	009b      	lsls	r3, r3, #2
 80002b8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80002ba:	e031      	b.n	8000320 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002bc:	4a1b      	ldr	r2, [pc, #108]	; (800032c <__NVIC_SetPriority+0xd8>)
 80002be:	1dfb      	adds	r3, r7, #7
 80002c0:	781b      	ldrb	r3, [r3, #0]
 80002c2:	0019      	movs	r1, r3
 80002c4:	230f      	movs	r3, #15
 80002c6:	400b      	ands	r3, r1
 80002c8:	3b08      	subs	r3, #8
 80002ca:	089b      	lsrs	r3, r3, #2
 80002cc:	3306      	adds	r3, #6
 80002ce:	009b      	lsls	r3, r3, #2
 80002d0:	18d3      	adds	r3, r2, r3
 80002d2:	3304      	adds	r3, #4
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	1dfa      	adds	r2, r7, #7
 80002d8:	7812      	ldrb	r2, [r2, #0]
 80002da:	0011      	movs	r1, r2
 80002dc:	2203      	movs	r2, #3
 80002de:	400a      	ands	r2, r1
 80002e0:	00d2      	lsls	r2, r2, #3
 80002e2:	21ff      	movs	r1, #255	; 0xff
 80002e4:	4091      	lsls	r1, r2
 80002e6:	000a      	movs	r2, r1
 80002e8:	43d2      	mvns	r2, r2
 80002ea:	401a      	ands	r2, r3
 80002ec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002ee:	683b      	ldr	r3, [r7, #0]
 80002f0:	019b      	lsls	r3, r3, #6
 80002f2:	22ff      	movs	r2, #255	; 0xff
 80002f4:	401a      	ands	r2, r3
 80002f6:	1dfb      	adds	r3, r7, #7
 80002f8:	781b      	ldrb	r3, [r3, #0]
 80002fa:	0018      	movs	r0, r3
 80002fc:	2303      	movs	r3, #3
 80002fe:	4003      	ands	r3, r0
 8000300:	00db      	lsls	r3, r3, #3
 8000302:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000304:	4809      	ldr	r0, [pc, #36]	; (800032c <__NVIC_SetPriority+0xd8>)
 8000306:	1dfb      	adds	r3, r7, #7
 8000308:	781b      	ldrb	r3, [r3, #0]
 800030a:	001c      	movs	r4, r3
 800030c:	230f      	movs	r3, #15
 800030e:	4023      	ands	r3, r4
 8000310:	3b08      	subs	r3, #8
 8000312:	089b      	lsrs	r3, r3, #2
 8000314:	430a      	orrs	r2, r1
 8000316:	3306      	adds	r3, #6
 8000318:	009b      	lsls	r3, r3, #2
 800031a:	18c3      	adds	r3, r0, r3
 800031c:	3304      	adds	r3, #4
 800031e:	601a      	str	r2, [r3, #0]
}
 8000320:	46c0      	nop			; (mov r8, r8)
 8000322:	46bd      	mov	sp, r7
 8000324:	b003      	add	sp, #12
 8000326:	bd90      	pop	{r4, r7, pc}
 8000328:	e000e100 	.word	0xe000e100
 800032c:	e000ed00 	.word	0xe000ed00

08000330 <pa1_adc_interrupt_init>:




void pa1_adc_interrupt_init(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0


	/* Configure the ADC GPIO Pin */

	/* Enable Clock access to gpioa */
	RCC->AHBENR |= GPIOAENABLE;
 8000334:	4b1b      	ldr	r3, [pc, #108]	; (80003a4 <pa1_adc_interrupt_init+0x74>)
 8000336:	695a      	ldr	r2, [r3, #20]
 8000338:	4b1a      	ldr	r3, [pc, #104]	; (80003a4 <pa1_adc_interrupt_init+0x74>)
 800033a:	2180      	movs	r1, #128	; 0x80
 800033c:	0289      	lsls	r1, r1, #10
 800033e:	430a      	orrs	r2, r1
 8000340:	615a      	str	r2, [r3, #20]
	/* Set the mode of PA1 to analog mode */
	GPIOA->MODER |= (1<<2);
 8000342:	2390      	movs	r3, #144	; 0x90
 8000344:	05db      	lsls	r3, r3, #23
 8000346:	681a      	ldr	r2, [r3, #0]
 8000348:	2390      	movs	r3, #144	; 0x90
 800034a:	05db      	lsls	r3, r3, #23
 800034c:	2104      	movs	r1, #4
 800034e:	430a      	orrs	r2, r1
 8000350:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (1<<3);
 8000352:	2390      	movs	r3, #144	; 0x90
 8000354:	05db      	lsls	r3, r3, #23
 8000356:	681a      	ldr	r2, [r3, #0]
 8000358:	2390      	movs	r3, #144	; 0x90
 800035a:	05db      	lsls	r3, r3, #23
 800035c:	2108      	movs	r1, #8
 800035e:	430a      	orrs	r2, r1
 8000360:	601a      	str	r2, [r3, #0]



	/* Configure the ADC module */
	/* Enable clock access to ADC */
	RCC->APB2ENR |= ADCENABLE;
 8000362:	4b10      	ldr	r3, [pc, #64]	; (80003a4 <pa1_adc_interrupt_init+0x74>)
 8000364:	699a      	ldr	r2, [r3, #24]
 8000366:	4b0f      	ldr	r3, [pc, #60]	; (80003a4 <pa1_adc_interrupt_init+0x74>)
 8000368:	2180      	movs	r1, #128	; 0x80
 800036a:	0089      	lsls	r1, r1, #2
 800036c:	430a      	orrs	r2, r1
 800036e:	619a      	str	r2, [r3, #24]


	/* Enable ADC end-of-conversion interrupt */
	ADC1->IER |= CR_EOCIE;
 8000370:	4b0d      	ldr	r3, [pc, #52]	; (80003a8 <pa1_adc_interrupt_init+0x78>)
 8000372:	685a      	ldr	r2, [r3, #4]
 8000374:	4b0c      	ldr	r3, [pc, #48]	; (80003a8 <pa1_adc_interrupt_init+0x78>)
 8000376:	2104      	movs	r1, #4
 8000378:	430a      	orrs	r2, r1
 800037a:	605a      	str	r2, [r3, #4]


	/* Enable ADC interrupt in NVIC */
	NVIC_EnableIRQ(ADC1_COMP_IRQn);
 800037c:	200c      	movs	r0, #12
 800037e:	f7ff ff4f 	bl	8000220 <__NVIC_EnableIRQ>


	/* Setting Priority */
	NVIC_SetPriority(ADC1_COMP_IRQn, 2);
 8000382:	2102      	movs	r1, #2
 8000384:	200c      	movs	r0, #12
 8000386:	f7ff ff65 	bl	8000254 <__NVIC_SetPriority>

	/* Configure adc parameters */
	/* Conversion sequence start */


	ADC1->CHSELR = ADC_CH1;
 800038a:	4b07      	ldr	r3, [pc, #28]	; (80003a8 <pa1_adc_interrupt_init+0x78>)
 800038c:	2202      	movs	r2, #2
 800038e:	629a      	str	r2, [r3, #40]	; 0x28

	/* Conversion sequence length */
	/* Enable ADC module */
	ADC1->CR |= CR_ADEN;
 8000390:	4b05      	ldr	r3, [pc, #20]	; (80003a8 <pa1_adc_interrupt_init+0x78>)
 8000392:	689a      	ldr	r2, [r3, #8]
 8000394:	4b04      	ldr	r3, [pc, #16]	; (80003a8 <pa1_adc_interrupt_init+0x78>)
 8000396:	2101      	movs	r1, #1
 8000398:	430a      	orrs	r2, r1
 800039a:	609a      	str	r2, [r3, #8]

}
 800039c:	46c0      	nop			; (mov r8, r8)
 800039e:	46bd      	mov	sp, r7
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	46c0      	nop			; (mov r8, r8)
 80003a4:	40021000 	.word	0x40021000
 80003a8:	40012400 	.word	0x40012400

080003ac <start_conversion>:
}



void start_conversion(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0
	/* Enable continuous convertion */
	ADC1->CFGR1 |= CFGR_CONT;
 80003b0:	4b07      	ldr	r3, [pc, #28]	; (80003d0 <start_conversion+0x24>)
 80003b2:	68da      	ldr	r2, [r3, #12]
 80003b4:	4b06      	ldr	r3, [pc, #24]	; (80003d0 <start_conversion+0x24>)
 80003b6:	2180      	movs	r1, #128	; 0x80
 80003b8:	0189      	lsls	r1, r1, #6
 80003ba:	430a      	orrs	r2, r1
 80003bc:	60da      	str	r2, [r3, #12]

	/* Start ADC conversion */
	ADC1->CR |= (1U<<2); // starting the adc conversion
 80003be:	4b04      	ldr	r3, [pc, #16]	; (80003d0 <start_conversion+0x24>)
 80003c0:	689a      	ldr	r2, [r3, #8]
 80003c2:	4b03      	ldr	r3, [pc, #12]	; (80003d0 <start_conversion+0x24>)
 80003c4:	2104      	movs	r1, #4
 80003c6:	430a      	orrs	r2, r1
 80003c8:	609a      	str	r2, [r3, #8]


}
 80003ca:	46c0      	nop			; (mov r8, r8)
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bd80      	pop	{r7, pc}
 80003d0:	40012400 	.word	0x40012400

080003d4 <main>:
uint32_t sensor_value;
uint16_t val;
uint16_t adcResult = 0;

int main(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0
	uart2_tx_init();
 80003d8:	f000 f806 	bl	80003e8 <uart2_tx_init>
	//pa1_adc_init();
	//start_conversion();

	pa1_adc_interrupt_init();
 80003dc:	f7ff ffa8 	bl	8000330 <pa1_adc_interrupt_init>
	//external_interrupt_selection_code();


	start_conversion();
 80003e0:	f7ff ffe4 	bl	80003ac <start_conversion>
while(1)
 80003e4:	e7fe      	b.n	80003e4 <main+0x10>
	...

080003e8 <uart2_tx_init>:
}



void uart2_tx_init(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0
	/* configure uart gpio pin */
	// Enable clock access to gpioa
	RCC->AHBENR |= GPIOA_ENABLE;
 80003ec:	4b28      	ldr	r3, [pc, #160]	; (8000490 <uart2_tx_init+0xa8>)
 80003ee:	695a      	ldr	r2, [r3, #20]
 80003f0:	4b27      	ldr	r3, [pc, #156]	; (8000490 <uart2_tx_init+0xa8>)
 80003f2:	2180      	movs	r1, #128	; 0x80
 80003f4:	0289      	lsls	r1, r1, #10
 80003f6:	430a      	orrs	r2, r1
 80003f8:	615a      	str	r2, [r3, #20]


	/* Set PA2 mode to alternate function mode */
	GPIOA->MODER |= (1U<<5);
 80003fa:	2390      	movs	r3, #144	; 0x90
 80003fc:	05db      	lsls	r3, r3, #23
 80003fe:	681a      	ldr	r2, [r3, #0]
 8000400:	2390      	movs	r3, #144	; 0x90
 8000402:	05db      	lsls	r3, r3, #23
 8000404:	2120      	movs	r1, #32
 8000406:	430a      	orrs	r2, r1
 8000408:	601a      	str	r2, [r3, #0]
	GPIOA->MODER &= ~(1U<<6);
 800040a:	2390      	movs	r3, #144	; 0x90
 800040c:	05db      	lsls	r3, r3, #23
 800040e:	681a      	ldr	r2, [r3, #0]
 8000410:	2390      	movs	r3, #144	; 0x90
 8000412:	05db      	lsls	r3, r3, #23
 8000414:	2140      	movs	r1, #64	; 0x40
 8000416:	438a      	bics	r2, r1
 8000418:	601a      	str	r2, [r3, #0]

	/* Set PA2 alternate function type to UART_TX (AF01) */
	GPIOA->AFR[0] |= (1<<8);
 800041a:	2390      	movs	r3, #144	; 0x90
 800041c:	05db      	lsls	r3, r3, #23
 800041e:	6a1a      	ldr	r2, [r3, #32]
 8000420:	2390      	movs	r3, #144	; 0x90
 8000422:	05db      	lsls	r3, r3, #23
 8000424:	2180      	movs	r1, #128	; 0x80
 8000426:	0049      	lsls	r1, r1, #1
 8000428:	430a      	orrs	r2, r1
 800042a:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] &= ~(1<<9);
 800042c:	2390      	movs	r3, #144	; 0x90
 800042e:	05db      	lsls	r3, r3, #23
 8000430:	6a1a      	ldr	r2, [r3, #32]
 8000432:	2390      	movs	r3, #144	; 0x90
 8000434:	05db      	lsls	r3, r3, #23
 8000436:	4917      	ldr	r1, [pc, #92]	; (8000494 <uart2_tx_init+0xac>)
 8000438:	400a      	ands	r2, r1
 800043a:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] &= ~(1<<10);
 800043c:	2390      	movs	r3, #144	; 0x90
 800043e:	05db      	lsls	r3, r3, #23
 8000440:	6a1a      	ldr	r2, [r3, #32]
 8000442:	2390      	movs	r3, #144	; 0x90
 8000444:	05db      	lsls	r3, r3, #23
 8000446:	4914      	ldr	r1, [pc, #80]	; (8000498 <uart2_tx_init+0xb0>)
 8000448:	400a      	ands	r2, r1
 800044a:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] &= ~(1<<11);
 800044c:	2390      	movs	r3, #144	; 0x90
 800044e:	05db      	lsls	r3, r3, #23
 8000450:	6a1a      	ldr	r2, [r3, #32]
 8000452:	2390      	movs	r3, #144	; 0x90
 8000454:	05db      	lsls	r3, r3, #23
 8000456:	4911      	ldr	r1, [pc, #68]	; (800049c <uart2_tx_init+0xb4>)
 8000458:	400a      	ands	r2, r1
 800045a:	621a      	str	r2, [r3, #32]


	/* configure uart module */
	/* enable clock access to uart2 */
	RCC->APB1ENR |= UART2EN;
 800045c:	4b0c      	ldr	r3, [pc, #48]	; (8000490 <uart2_tx_init+0xa8>)
 800045e:	69da      	ldr	r2, [r3, #28]
 8000460:	4b0b      	ldr	r3, [pc, #44]	; (8000490 <uart2_tx_init+0xa8>)
 8000462:	2180      	movs	r1, #128	; 0x80
 8000464:	0289      	lsls	r1, r1, #10
 8000466:	430a      	orrs	r2, r1
 8000468:	61da      	str	r2, [r3, #28]

	/* configure baud rate */
	uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 800046a:	2396      	movs	r3, #150	; 0x96
 800046c:	021b      	lsls	r3, r3, #8
 800046e:	490c      	ldr	r1, [pc, #48]	; (80004a0 <uart2_tx_init+0xb8>)
 8000470:	480c      	ldr	r0, [pc, #48]	; (80004a4 <uart2_tx_init+0xbc>)
 8000472:	001a      	movs	r2, r3
 8000474:	f000 f818 	bl	80004a8 <uart_set_baudrate>

	/* configure the transfer direction */
	USART2->CR1 = CR1_TE;
 8000478:	4b0a      	ldr	r3, [pc, #40]	; (80004a4 <uart2_tx_init+0xbc>)
 800047a:	2208      	movs	r2, #8
 800047c:	601a      	str	r2, [r3, #0]

	/* enable uart module */
	USART2->CR1 |= CR1_UE_ENABLE;
 800047e:	4b09      	ldr	r3, [pc, #36]	; (80004a4 <uart2_tx_init+0xbc>)
 8000480:	681a      	ldr	r2, [r3, #0]
 8000482:	4b08      	ldr	r3, [pc, #32]	; (80004a4 <uart2_tx_init+0xbc>)
 8000484:	2101      	movs	r1, #1
 8000486:	430a      	orrs	r2, r1
 8000488:	601a      	str	r2, [r3, #0]


}
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}
 8000490:	40021000 	.word	0x40021000
 8000494:	fffffdff 	.word	0xfffffdff
 8000498:	fffffbff 	.word	0xfffffbff
 800049c:	fffff7ff 	.word	0xfffff7ff
 80004a0:	007a1200 	.word	0x007a1200
 80004a4:	40004400 	.word	0x40004400

080004a8 <uart_set_baudrate>:




static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b084      	sub	sp, #16
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	60f8      	str	r0, [r7, #12]
 80004b0:	60b9      	str	r1, [r7, #8]
 80004b2:	607a      	str	r2, [r7, #4]

USARTx->BRR = compute_uart_bd(PeriphClk, BaudRate);
 80004b4:	687a      	ldr	r2, [r7, #4]
 80004b6:	68bb      	ldr	r3, [r7, #8]
 80004b8:	0011      	movs	r1, r2
 80004ba:	0018      	movs	r0, r3
 80004bc:	f000 f808 	bl	80004d0 <compute_uart_bd>
 80004c0:	0003      	movs	r3, r0
 80004c2:	001a      	movs	r2, r3
 80004c4:	68fb      	ldr	r3, [r7, #12]
 80004c6:	60da      	str	r2, [r3, #12]

}
 80004c8:	46c0      	nop			; (mov r8, r8)
 80004ca:	46bd      	mov	sp, r7
 80004cc:	b004      	add	sp, #16
 80004ce:	bd80      	pop	{r7, pc}

080004d0 <compute_uart_bd>:




static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
 80004d8:	6039      	str	r1, [r7, #0]
			return ((PeriphClk + (BaudRate/2U)) /BaudRate);
 80004da:	683b      	ldr	r3, [r7, #0]
 80004dc:	085a      	lsrs	r2, r3, #1
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	18d3      	adds	r3, r2, r3
 80004e2:	6839      	ldr	r1, [r7, #0]
 80004e4:	0018      	movs	r0, r3
 80004e6:	f7ff fe0f 	bl	8000108 <__udivsi3>
 80004ea:	0003      	movs	r3, r0
 80004ec:	b29b      	uxth	r3, r3


}
 80004ee:	0018      	movs	r0, r3
 80004f0:	46bd      	mov	sp, r7
 80004f2:	b002      	add	sp, #8
 80004f4:	bd80      	pop	{r7, pc}
	...

080004f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004f8:	480d      	ldr	r0, [pc, #52]	; (8000530 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004fa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004fc:	e000      	b.n	8000500 <Reset_Handler+0x8>
 80004fe:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdatSTa
 8000500:	480c      	ldr	r0, [pc, #48]	; (8000534 <LoopForever+0x6>)
  ldr r1, =_edata
 8000502:	490d      	ldr	r1, [pc, #52]	; (8000538 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000504:	4a0d      	ldr	r2, [pc, #52]	; (800053c <LoopForever+0xe>)
  movs r3, #0
 8000506:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000508:	e002      	b.n	8000510 <LoopCopyDataInit>

0800050a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800050a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800050c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800050e:	3304      	adds	r3, #4

08000510 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000510:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000512:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000514:	d3f9      	bcc.n	800050a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000516:	4a0a      	ldr	r2, [pc, #40]	; (8000540 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000518:	4c0a      	ldr	r4, [pc, #40]	; (8000544 <LoopForever+0x16>)
  movs r3, #0
 800051a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800051c:	e001      	b.n	8000522 <LoopFillZerobss>

0800051e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800051e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000520:	3204      	adds	r2, #4

08000522 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000522:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000524:	d3fb      	bcc.n	800051e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000526:	f000 f811 	bl	800054c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800052a:	f7ff ff53 	bl	80003d4 <main>

0800052e <LoopForever>:

LoopForever:
  b LoopForever
 800052e:	e7fe      	b.n	800052e <LoopForever>
  ldr   r0, =_estack
 8000530:	20008000 	.word	0x20008000
  ldr r0, =_sdatSTa
 8000534:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000538:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800053c:	080005b4 	.word	0x080005b4
  ldr r2, =_sbss
 8000540:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000544:	2000001c 	.word	0x2000001c

08000548 <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000548:	e7fe      	b.n	8000548 <ADC_COMP_IRQHandler>
	...

0800054c <__libc_init_array>:
 800054c:	b570      	push	{r4, r5, r6, lr}
 800054e:	2600      	movs	r6, #0
 8000550:	4c0c      	ldr	r4, [pc, #48]	; (8000584 <__libc_init_array+0x38>)
 8000552:	4d0d      	ldr	r5, [pc, #52]	; (8000588 <__libc_init_array+0x3c>)
 8000554:	1b64      	subs	r4, r4, r5
 8000556:	10a4      	asrs	r4, r4, #2
 8000558:	42a6      	cmp	r6, r4
 800055a:	d109      	bne.n	8000570 <__libc_init_array+0x24>
 800055c:	2600      	movs	r6, #0
 800055e:	f000 f819 	bl	8000594 <_init>
 8000562:	4c0a      	ldr	r4, [pc, #40]	; (800058c <__libc_init_array+0x40>)
 8000564:	4d0a      	ldr	r5, [pc, #40]	; (8000590 <__libc_init_array+0x44>)
 8000566:	1b64      	subs	r4, r4, r5
 8000568:	10a4      	asrs	r4, r4, #2
 800056a:	42a6      	cmp	r6, r4
 800056c:	d105      	bne.n	800057a <__libc_init_array+0x2e>
 800056e:	bd70      	pop	{r4, r5, r6, pc}
 8000570:	00b3      	lsls	r3, r6, #2
 8000572:	58eb      	ldr	r3, [r5, r3]
 8000574:	4798      	blx	r3
 8000576:	3601      	adds	r6, #1
 8000578:	e7ee      	b.n	8000558 <__libc_init_array+0xc>
 800057a:	00b3      	lsls	r3, r6, #2
 800057c:	58eb      	ldr	r3, [r5, r3]
 800057e:	4798      	blx	r3
 8000580:	3601      	adds	r6, #1
 8000582:	e7f2      	b.n	800056a <__libc_init_array+0x1e>
 8000584:	080005ac 	.word	0x080005ac
 8000588:	080005ac 	.word	0x080005ac
 800058c:	080005b0 	.word	0x080005b0
 8000590:	080005ac 	.word	0x080005ac

08000594 <_init>:
 8000594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000596:	46c0      	nop			; (mov r8, r8)
 8000598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800059a:	bc08      	pop	{r3}
 800059c:	469e      	mov	lr, r3
 800059e:	4770      	bx	lr

080005a0 <_fini>:
 80005a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005a2:	46c0      	nop			; (mov r8, r8)
 80005a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005a6:	bc08      	pop	{r3}
 80005a8:	469e      	mov	lr, r3
 80005aa:	4770      	bx	lr
