
15_uart_rx_interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f3c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08000ffc  08000ffc  00010ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001024  08001024  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08001024  08001024  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001024  08001024  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001024  08001024  00011024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001028  08001028  00011028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  0800102c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  2000005c  08001088  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  08001088  000201cc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001170  00000000  00000000  000200c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000577  00000000  00000000  00021237  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000180  00000000  00000000  000217b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000010a  00000000  00000000  00021930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00014164  00000000  00000000  00021a3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000018c4  00000000  00000000  00035b9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000683bc  00000000  00000000  00037462  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000ac0  00000000  00000000  0009f820  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  000a02e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08000fe4 	.word	0x08000fe4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	08000fe4 	.word	0x08000fe4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:

char key;


int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
	RCC->AHBENR |= GPIOA_ENABLE;
 8000224:	4b0d      	ldr	r3, [pc, #52]	; (800025c <main+0x3c>)
 8000226:	695a      	ldr	r2, [r3, #20]
 8000228:	4b0c      	ldr	r3, [pc, #48]	; (800025c <main+0x3c>)
 800022a:	2180      	movs	r1, #128	; 0x80
 800022c:	0289      	lsls	r1, r1, #10
 800022e:	430a      	orrs	r2, r1
 8000230:	615a      	str	r2, [r3, #20]

	GPIOA->MODER |= (1U << 10);
 8000232:	2390      	movs	r3, #144	; 0x90
 8000234:	05db      	lsls	r3, r3, #23
 8000236:	681a      	ldr	r2, [r3, #0]
 8000238:	2390      	movs	r3, #144	; 0x90
 800023a:	05db      	lsls	r3, r3, #23
 800023c:	2180      	movs	r1, #128	; 0x80
 800023e:	00c9      	lsls	r1, r1, #3
 8000240:	430a      	orrs	r2, r1
 8000242:	601a      	str	r2, [r3, #0]
	GPIOA->MODER &= ~(1U << 11);
 8000244:	2390      	movs	r3, #144	; 0x90
 8000246:	05db      	lsls	r3, r3, #23
 8000248:	681a      	ldr	r2, [r3, #0]
 800024a:	2390      	movs	r3, #144	; 0x90
 800024c:	05db      	lsls	r3, r3, #23
 800024e:	4904      	ldr	r1, [pc, #16]	; (8000260 <main+0x40>)
 8000250:	400a      	ands	r2, r1
 8000252:	601a      	str	r2, [r3, #0]


	uart2_rx_interrupt_init();
 8000254:	f000 f908 	bl	8000468 <uart2_rx_interrupt_init>
	//uart2_tx_init();
	//uart2_rxtx_init();


while(1)
 8000258:	e7fe      	b.n	8000258 <main+0x38>
 800025a:	46c0      	nop			; (mov r8, r8)
 800025c:	40021000 	.word	0x40021000
 8000260:	fffff7ff 	.word	0xfffff7ff

08000264 <uart_callback>:




static void uart_callback(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
	key = USART2->RDR;
 8000268:	4b12      	ldr	r3, [pc, #72]	; (80002b4 <uart_callback+0x50>)
 800026a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800026c:	b29b      	uxth	r3, r3
 800026e:	b2da      	uxtb	r2, r3
 8000270:	4b11      	ldr	r3, [pc, #68]	; (80002b8 <uart_callback+0x54>)
 8000272:	701a      	strb	r2, [r3, #0]

	if(key == '1')
 8000274:	4b10      	ldr	r3, [pc, #64]	; (80002b8 <uart_callback+0x54>)
 8000276:	781b      	ldrb	r3, [r3, #0]
 8000278:	2b31      	cmp	r3, #49	; 0x31
 800027a:	d10c      	bne.n	8000296 <uart_callback+0x32>
	{
		GPIOA->ODR |= GPIOA_5;
 800027c:	2390      	movs	r3, #144	; 0x90
 800027e:	05db      	lsls	r3, r3, #23
 8000280:	695a      	ldr	r2, [r3, #20]
 8000282:	2390      	movs	r3, #144	; 0x90
 8000284:	05db      	lsls	r3, r3, #23
 8000286:	2120      	movs	r1, #32
 8000288:	430a      	orrs	r2, r1
 800028a:	615a      	str	r2, [r3, #20]
		printf("1 is pressed\n");
 800028c:	4b0b      	ldr	r3, [pc, #44]	; (80002bc <uart_callback+0x58>)
 800028e:	0018      	movs	r0, r3
 8000290:	f000 fad8 	bl	8000844 <puts>
	{
		GPIOA->ODR &= ~GPIOA_5;
		printf("another key is pressed\n");
	}

}
 8000294:	e00b      	b.n	80002ae <uart_callback+0x4a>
		GPIOA->ODR &= ~GPIOA_5;
 8000296:	2390      	movs	r3, #144	; 0x90
 8000298:	05db      	lsls	r3, r3, #23
 800029a:	695a      	ldr	r2, [r3, #20]
 800029c:	2390      	movs	r3, #144	; 0x90
 800029e:	05db      	lsls	r3, r3, #23
 80002a0:	2120      	movs	r1, #32
 80002a2:	438a      	bics	r2, r1
 80002a4:	615a      	str	r2, [r3, #20]
		printf("another key is pressed\n");
 80002a6:	4b06      	ldr	r3, [pc, #24]	; (80002c0 <uart_callback+0x5c>)
 80002a8:	0018      	movs	r0, r3
 80002aa:	f000 facb 	bl	8000844 <puts>
}
 80002ae:	46c0      	nop			; (mov r8, r8)
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bd80      	pop	{r7, pc}
 80002b4:	40004400 	.word	0x40004400
 80002b8:	20000078 	.word	0x20000078
 80002bc:	08000ffc 	.word	0x08000ffc
 80002c0:	0800100c 	.word	0x0800100c

080002c4 <USART2_IRQHandler>:


void USART2_IRQHandler(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
	/* Check if RXNE is set */
if(USART2->ISR & ISR_RXNE)
 80002c8:	4b04      	ldr	r3, [pc, #16]	; (80002dc <USART2_IRQHandler+0x18>)
 80002ca:	69db      	ldr	r3, [r3, #28]
 80002cc:	2220      	movs	r2, #32
 80002ce:	4013      	ands	r3, r2
 80002d0:	d001      	beq.n	80002d6 <USART2_IRQHandler+0x12>
{
	uart_callback();
 80002d2:	f7ff ffc7 	bl	8000264 <uart_callback>
}

}
 80002d6:	46c0      	nop			; (mov r8, r8)
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	40004400 	.word	0x40004400

080002e0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b086      	sub	sp, #24
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	60f8      	str	r0, [r7, #12]
 80002e8:	60b9      	str	r1, [r7, #8]
 80002ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002ec:	2300      	movs	r3, #0
 80002ee:	617b      	str	r3, [r7, #20]
 80002f0:	e00a      	b.n	8000308 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80002f2:	e000      	b.n	80002f6 <_read+0x16>
 80002f4:	bf00      	nop
 80002f6:	0001      	movs	r1, r0
 80002f8:	68bb      	ldr	r3, [r7, #8]
 80002fa:	1c5a      	adds	r2, r3, #1
 80002fc:	60ba      	str	r2, [r7, #8]
 80002fe:	b2ca      	uxtb	r2, r1
 8000300:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000302:	697b      	ldr	r3, [r7, #20]
 8000304:	3301      	adds	r3, #1
 8000306:	617b      	str	r3, [r7, #20]
 8000308:	697a      	ldr	r2, [r7, #20]
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	429a      	cmp	r2, r3
 800030e:	dbf0      	blt.n	80002f2 <_read+0x12>
  }

  return len;
 8000310:	687b      	ldr	r3, [r7, #4]
}
 8000312:	0018      	movs	r0, r3
 8000314:	46bd      	mov	sp, r7
 8000316:	b006      	add	sp, #24
 8000318:	bd80      	pop	{r7, pc}

0800031a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800031a:	b580      	push	{r7, lr}
 800031c:	b086      	sub	sp, #24
 800031e:	af00      	add	r7, sp, #0
 8000320:	60f8      	str	r0, [r7, #12]
 8000322:	60b9      	str	r1, [r7, #8]
 8000324:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000326:	2300      	movs	r3, #0
 8000328:	617b      	str	r3, [r7, #20]
 800032a:	e009      	b.n	8000340 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800032c:	68bb      	ldr	r3, [r7, #8]
 800032e:	1c5a      	adds	r2, r3, #1
 8000330:	60ba      	str	r2, [r7, #8]
 8000332:	781b      	ldrb	r3, [r3, #0]
 8000334:	0018      	movs	r0, r3
 8000336:	f000 f889 	bl	800044c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800033a:	697b      	ldr	r3, [r7, #20]
 800033c:	3301      	adds	r3, #1
 800033e:	617b      	str	r3, [r7, #20]
 8000340:	697a      	ldr	r2, [r7, #20]
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	429a      	cmp	r2, r3
 8000346:	dbf1      	blt.n	800032c <_write+0x12>
  }
  return len;
 8000348:	687b      	ldr	r3, [r7, #4]
}
 800034a:	0018      	movs	r0, r3
 800034c:	46bd      	mov	sp, r7
 800034e:	b006      	add	sp, #24
 8000350:	bd80      	pop	{r7, pc}

08000352 <_close>:

int _close(int file)
{
 8000352:	b580      	push	{r7, lr}
 8000354:	b082      	sub	sp, #8
 8000356:	af00      	add	r7, sp, #0
 8000358:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800035a:	2301      	movs	r3, #1
 800035c:	425b      	negs	r3, r3
}
 800035e:	0018      	movs	r0, r3
 8000360:	46bd      	mov	sp, r7
 8000362:	b002      	add	sp, #8
 8000364:	bd80      	pop	{r7, pc}

08000366 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000366:	b580      	push	{r7, lr}
 8000368:	b082      	sub	sp, #8
 800036a:	af00      	add	r7, sp, #0
 800036c:	6078      	str	r0, [r7, #4]
 800036e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000370:	683b      	ldr	r3, [r7, #0]
 8000372:	2280      	movs	r2, #128	; 0x80
 8000374:	0192      	lsls	r2, r2, #6
 8000376:	605a      	str	r2, [r3, #4]
  return 0;
 8000378:	2300      	movs	r3, #0
}
 800037a:	0018      	movs	r0, r3
 800037c:	46bd      	mov	sp, r7
 800037e:	b002      	add	sp, #8
 8000380:	bd80      	pop	{r7, pc}

08000382 <_isatty>:

int _isatty(int file)
{
 8000382:	b580      	push	{r7, lr}
 8000384:	b082      	sub	sp, #8
 8000386:	af00      	add	r7, sp, #0
 8000388:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800038a:	2301      	movs	r3, #1
}
 800038c:	0018      	movs	r0, r3
 800038e:	46bd      	mov	sp, r7
 8000390:	b002      	add	sp, #8
 8000392:	bd80      	pop	{r7, pc}

08000394 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b084      	sub	sp, #16
 8000398:	af00      	add	r7, sp, #0
 800039a:	60f8      	str	r0, [r7, #12]
 800039c:	60b9      	str	r1, [r7, #8]
 800039e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80003a0:	2300      	movs	r3, #0
}
 80003a2:	0018      	movs	r0, r3
 80003a4:	46bd      	mov	sp, r7
 80003a6:	b004      	add	sp, #16
 80003a8:	bd80      	pop	{r7, pc}
	...

080003ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b086      	sub	sp, #24
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80003b4:	4a14      	ldr	r2, [pc, #80]	; (8000408 <_sbrk+0x5c>)
 80003b6:	4b15      	ldr	r3, [pc, #84]	; (800040c <_sbrk+0x60>)
 80003b8:	1ad3      	subs	r3, r2, r3
 80003ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80003bc:	697b      	ldr	r3, [r7, #20]
 80003be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80003c0:	4b13      	ldr	r3, [pc, #76]	; (8000410 <_sbrk+0x64>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d102      	bne.n	80003ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80003c8:	4b11      	ldr	r3, [pc, #68]	; (8000410 <_sbrk+0x64>)
 80003ca:	4a12      	ldr	r2, [pc, #72]	; (8000414 <_sbrk+0x68>)
 80003cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80003ce:	4b10      	ldr	r3, [pc, #64]	; (8000410 <_sbrk+0x64>)
 80003d0:	681a      	ldr	r2, [r3, #0]
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	18d3      	adds	r3, r2, r3
 80003d6:	693a      	ldr	r2, [r7, #16]
 80003d8:	429a      	cmp	r2, r3
 80003da:	d207      	bcs.n	80003ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80003dc:	f000 fb84 	bl	8000ae8 <__errno>
 80003e0:	0003      	movs	r3, r0
 80003e2:	220c      	movs	r2, #12
 80003e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80003e6:	2301      	movs	r3, #1
 80003e8:	425b      	negs	r3, r3
 80003ea:	e009      	b.n	8000400 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80003ec:	4b08      	ldr	r3, [pc, #32]	; (8000410 <_sbrk+0x64>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80003f2:	4b07      	ldr	r3, [pc, #28]	; (8000410 <_sbrk+0x64>)
 80003f4:	681a      	ldr	r2, [r3, #0]
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	18d2      	adds	r2, r2, r3
 80003fa:	4b05      	ldr	r3, [pc, #20]	; (8000410 <_sbrk+0x64>)
 80003fc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80003fe:	68fb      	ldr	r3, [r7, #12]
}
 8000400:	0018      	movs	r0, r3
 8000402:	46bd      	mov	sp, r7
 8000404:	b006      	add	sp, #24
 8000406:	bd80      	pop	{r7, pc}
 8000408:	20008000 	.word	0x20008000
 800040c:	00000400 	.word	0x00000400
 8000410:	2000007c 	.word	0x2000007c
 8000414:	200001d0 	.word	0x200001d0

08000418 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0
 800041e:	0002      	movs	r2, r0
 8000420:	1dfb      	adds	r3, r7, #7
 8000422:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000424:	1dfb      	adds	r3, r7, #7
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	2b7f      	cmp	r3, #127	; 0x7f
 800042a:	d809      	bhi.n	8000440 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800042c:	1dfb      	adds	r3, r7, #7
 800042e:	781b      	ldrb	r3, [r3, #0]
 8000430:	001a      	movs	r2, r3
 8000432:	231f      	movs	r3, #31
 8000434:	401a      	ands	r2, r3
 8000436:	4b04      	ldr	r3, [pc, #16]	; (8000448 <__NVIC_EnableIRQ+0x30>)
 8000438:	2101      	movs	r1, #1
 800043a:	4091      	lsls	r1, r2
 800043c:	000a      	movs	r2, r1
 800043e:	601a      	str	r2, [r3, #0]
  }
}
 8000440:	46c0      	nop			; (mov r8, r8)
 8000442:	46bd      	mov	sp, r7
 8000444:	b002      	add	sp, #8
 8000446:	bd80      	pop	{r7, pc}
 8000448:	e000e100 	.word	0xe000e100

0800044c <__io_putchar>:


/* Funtion Prototypes */

int __io_putchar(int ch)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b082      	sub	sp, #8
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
	uart_write(ch);
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	0018      	movs	r0, r3
 8000458:	f000 f870 	bl	800053c <uart_write>
	return ch;
 800045c:	687b      	ldr	r3, [r7, #4]
}
 800045e:	0018      	movs	r0, r3
 8000460:	46bd      	mov	sp, r7
 8000462:	b002      	add	sp, #8
 8000464:	bd80      	pop	{r7, pc}
	...

08000468 <uart2_rx_interrupt_init>:


}

void uart2_rx_interrupt_init(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0
	/* configure uart gpio pin */
	// Enable clock access to gpioa
	RCC->AHBENR |= GPIOA_ENABLE;
 800046c:	4b2d      	ldr	r3, [pc, #180]	; (8000524 <uart2_rx_interrupt_init+0xbc>)
 800046e:	695a      	ldr	r2, [r3, #20]
 8000470:	4b2c      	ldr	r3, [pc, #176]	; (8000524 <uart2_rx_interrupt_init+0xbc>)
 8000472:	2180      	movs	r1, #128	; 0x80
 8000474:	0289      	lsls	r1, r1, #10
 8000476:	430a      	orrs	r2, r1
 8000478:	615a      	str	r2, [r3, #20]


	/* Set PA3 as alternate function mode*/
	GPIOA->MODER |= (1U<<7);
 800047a:	2390      	movs	r3, #144	; 0x90
 800047c:	05db      	lsls	r3, r3, #23
 800047e:	681a      	ldr	r2, [r3, #0]
 8000480:	2390      	movs	r3, #144	; 0x90
 8000482:	05db      	lsls	r3, r3, #23
 8000484:	2180      	movs	r1, #128	; 0x80
 8000486:	430a      	orrs	r2, r1
 8000488:	601a      	str	r2, [r3, #0]
	GPIOA->MODER &= ~(1U<<6);
 800048a:	2390      	movs	r3, #144	; 0x90
 800048c:	05db      	lsls	r3, r3, #23
 800048e:	681a      	ldr	r2, [r3, #0]
 8000490:	2390      	movs	r3, #144	; 0x90
 8000492:	05db      	lsls	r3, r3, #23
 8000494:	2140      	movs	r1, #64	; 0x40
 8000496:	438a      	bics	r2, r1
 8000498:	601a      	str	r2, [r3, #0]

	/* Set PA3 alternate fucntion type to UART_RX */
	GPIOA->AFR[0] |= (1<<12);
 800049a:	2390      	movs	r3, #144	; 0x90
 800049c:	05db      	lsls	r3, r3, #23
 800049e:	6a1a      	ldr	r2, [r3, #32]
 80004a0:	2390      	movs	r3, #144	; 0x90
 80004a2:	05db      	lsls	r3, r3, #23
 80004a4:	2180      	movs	r1, #128	; 0x80
 80004a6:	0149      	lsls	r1, r1, #5
 80004a8:	430a      	orrs	r2, r1
 80004aa:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] &= ~(1<<13);
 80004ac:	2390      	movs	r3, #144	; 0x90
 80004ae:	05db      	lsls	r3, r3, #23
 80004b0:	6a1a      	ldr	r2, [r3, #32]
 80004b2:	2390      	movs	r3, #144	; 0x90
 80004b4:	05db      	lsls	r3, r3, #23
 80004b6:	491c      	ldr	r1, [pc, #112]	; (8000528 <uart2_rx_interrupt_init+0xc0>)
 80004b8:	400a      	ands	r2, r1
 80004ba:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] &= ~(1<<14);
 80004bc:	2390      	movs	r3, #144	; 0x90
 80004be:	05db      	lsls	r3, r3, #23
 80004c0:	6a1a      	ldr	r2, [r3, #32]
 80004c2:	2390      	movs	r3, #144	; 0x90
 80004c4:	05db      	lsls	r3, r3, #23
 80004c6:	4919      	ldr	r1, [pc, #100]	; (800052c <uart2_rx_interrupt_init+0xc4>)
 80004c8:	400a      	ands	r2, r1
 80004ca:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] &= ~(1<<15);
 80004cc:	2390      	movs	r3, #144	; 0x90
 80004ce:	05db      	lsls	r3, r3, #23
 80004d0:	6a1a      	ldr	r2, [r3, #32]
 80004d2:	2390      	movs	r3, #144	; 0x90
 80004d4:	05db      	lsls	r3, r3, #23
 80004d6:	4916      	ldr	r1, [pc, #88]	; (8000530 <uart2_rx_interrupt_init+0xc8>)
 80004d8:	400a      	ands	r2, r1
 80004da:	621a      	str	r2, [r3, #32]



	/* configure uart module */
	/* enable clock access to uart2 */
	RCC->APB1ENR |= UART2EN;
 80004dc:	4b11      	ldr	r3, [pc, #68]	; (8000524 <uart2_rx_interrupt_init+0xbc>)
 80004de:	69da      	ldr	r2, [r3, #28]
 80004e0:	4b10      	ldr	r3, [pc, #64]	; (8000524 <uart2_rx_interrupt_init+0xbc>)
 80004e2:	2180      	movs	r1, #128	; 0x80
 80004e4:	0289      	lsls	r1, r1, #10
 80004e6:	430a      	orrs	r2, r1
 80004e8:	61da      	str	r2, [r3, #28]

	/* configure baud rate */
	uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 80004ea:	2396      	movs	r3, #150	; 0x96
 80004ec:	021b      	lsls	r3, r3, #8
 80004ee:	4911      	ldr	r1, [pc, #68]	; (8000534 <uart2_rx_interrupt_init+0xcc>)
 80004f0:	4811      	ldr	r0, [pc, #68]	; (8000538 <uart2_rx_interrupt_init+0xd0>)
 80004f2:	001a      	movs	r2, r3
 80004f4:	f000 f83a 	bl	800056c <uart_set_baudrate>

	/* configure the transfer direction
	 *
	 * rx and tx in this case
	 */
	USART2->CR1 = CR1_TE | CR1_RE;
 80004f8:	4b0f      	ldr	r3, [pc, #60]	; (8000538 <uart2_rx_interrupt_init+0xd0>)
 80004fa:	220c      	movs	r2, #12
 80004fc:	601a      	str	r2, [r3, #0]

	/* Enable RXNE interrupt */
	USART2->CR1 |= CR1_RXNEIR;
 80004fe:	4b0e      	ldr	r3, [pc, #56]	; (8000538 <uart2_rx_interrupt_init+0xd0>)
 8000500:	681a      	ldr	r2, [r3, #0]
 8000502:	4b0d      	ldr	r3, [pc, #52]	; (8000538 <uart2_rx_interrupt_init+0xd0>)
 8000504:	2120      	movs	r1, #32
 8000506:	430a      	orrs	r2, r1
 8000508:	601a      	str	r2, [r3, #0]

	/* Enable UART2 interrupt in NVIC */
	NVIC_EnableIRQ(USART2_IRQn);
 800050a:	201c      	movs	r0, #28
 800050c:	f7ff ff84 	bl	8000418 <__NVIC_EnableIRQ>


	/* enable uart module */
	USART2->CR1 |= CR1_UE_ENABLE;
 8000510:	4b09      	ldr	r3, [pc, #36]	; (8000538 <uart2_rx_interrupt_init+0xd0>)
 8000512:	681a      	ldr	r2, [r3, #0]
 8000514:	4b08      	ldr	r3, [pc, #32]	; (8000538 <uart2_rx_interrupt_init+0xd0>)
 8000516:	2101      	movs	r1, #1
 8000518:	430a      	orrs	r2, r1
 800051a:	601a      	str	r2, [r3, #0]


}
 800051c:	46c0      	nop			; (mov r8, r8)
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	46c0      	nop			; (mov r8, r8)
 8000524:	40021000 	.word	0x40021000
 8000528:	ffffdfff 	.word	0xffffdfff
 800052c:	ffffbfff 	.word	0xffffbfff
 8000530:	ffff7fff 	.word	0xffff7fff
 8000534:	007a1200 	.word	0x007a1200
 8000538:	40004400 	.word	0x40004400

0800053c <uart_write>:




void uart_write(unsigned int ch)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
	/* make sure transmit data register is empty */
	while(!(USART2->ISR & ISR_TXE))
 8000544:	46c0      	nop			; (mov r8, r8)
 8000546:	4b08      	ldr	r3, [pc, #32]	; (8000568 <uart_write+0x2c>)
 8000548:	69db      	ldr	r3, [r3, #28]
 800054a:	2280      	movs	r2, #128	; 0x80
 800054c:	4013      	ands	r3, r2
 800054e:	d0fa      	beq.n	8000546 <uart_write+0xa>

	} // we wait here until transmission is completed

	/* Write to transmit data register */

	USART2->TDR = (ch & 0xFF);
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	b29b      	uxth	r3, r3
 8000554:	4a04      	ldr	r2, [pc, #16]	; (8000568 <uart_write+0x2c>)
 8000556:	21ff      	movs	r1, #255	; 0xff
 8000558:	400b      	ands	r3, r1
 800055a:	b29b      	uxth	r3, r3
 800055c:	8513      	strh	r3, [r2, #40]	; 0x28




}
 800055e:	46c0      	nop			; (mov r8, r8)
 8000560:	46bd      	mov	sp, r7
 8000562:	b002      	add	sp, #8
 8000564:	bd80      	pop	{r7, pc}
 8000566:	46c0      	nop			; (mov r8, r8)
 8000568:	40004400 	.word	0x40004400

0800056c <uart_set_baudrate>:




static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	60b9      	str	r1, [r7, #8]
 8000576:	607a      	str	r2, [r7, #4]

USARTx->BRR = compute_uart_bd(PeriphClk, BaudRate);
 8000578:	687a      	ldr	r2, [r7, #4]
 800057a:	68bb      	ldr	r3, [r7, #8]
 800057c:	0011      	movs	r1, r2
 800057e:	0018      	movs	r0, r3
 8000580:	f000 f808 	bl	8000594 <compute_uart_bd>
 8000584:	0003      	movs	r3, r0
 8000586:	001a      	movs	r2, r3
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	60da      	str	r2, [r3, #12]

}
 800058c:	46c0      	nop			; (mov r8, r8)
 800058e:	46bd      	mov	sp, r7
 8000590:	b004      	add	sp, #16
 8000592:	bd80      	pop	{r7, pc}

08000594 <compute_uart_bd>:




static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
 800059c:	6039      	str	r1, [r7, #0]
			return ((PeriphClk + (BaudRate/2U)) /BaudRate);
 800059e:	683b      	ldr	r3, [r7, #0]
 80005a0:	085a      	lsrs	r2, r3, #1
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	18d3      	adds	r3, r2, r3
 80005a6:	6839      	ldr	r1, [r7, #0]
 80005a8:	0018      	movs	r0, r3
 80005aa:	f7ff fdad 	bl	8000108 <__udivsi3>
 80005ae:	0003      	movs	r3, r0
 80005b0:	b29b      	uxth	r3, r3


}
 80005b2:	0018      	movs	r0, r3
 80005b4:	46bd      	mov	sp, r7
 80005b6:	b002      	add	sp, #8
 80005b8:	bd80      	pop	{r7, pc}
	...

080005bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005bc:	480d      	ldr	r0, [pc, #52]	; (80005f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005be:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005c0:	e000      	b.n	80005c4 <Reset_Handler+0x8>
 80005c2:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdatSTa
 80005c4:	480c      	ldr	r0, [pc, #48]	; (80005f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80005c6:	490d      	ldr	r1, [pc, #52]	; (80005fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80005c8:	4a0d      	ldr	r2, [pc, #52]	; (8000600 <LoopForever+0xe>)
  movs r3, #0
 80005ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005cc:	e002      	b.n	80005d4 <LoopCopyDataInit>

080005ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005d2:	3304      	adds	r3, #4

080005d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005d8:	d3f9      	bcc.n	80005ce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005da:	4a0a      	ldr	r2, [pc, #40]	; (8000604 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005dc:	4c0a      	ldr	r4, [pc, #40]	; (8000608 <LoopForever+0x16>)
  movs r3, #0
 80005de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005e0:	e001      	b.n	80005e6 <LoopFillZerobss>

080005e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005e4:	3204      	adds	r2, #4

080005e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005e8:	d3fb      	bcc.n	80005e2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005ea:	f000 fa83 	bl	8000af4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005ee:	f7ff fe17 	bl	8000220 <main>

080005f2 <LoopForever>:

LoopForever:
  b LoopForever
 80005f2:	e7fe      	b.n	80005f2 <LoopForever>
  ldr   r0, =_estack
 80005f4:	20008000 	.word	0x20008000
  ldr r0, =_sdatSTa
 80005f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005fc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000600:	0800102c 	.word	0x0800102c
  ldr r2, =_sbss
 8000604:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000608:	200001cc 	.word	0x200001cc

0800060c <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800060c:	e7fe      	b.n	800060c <ADC_COMP_IRQHandler>
	...

08000610 <std>:
 8000610:	2300      	movs	r3, #0
 8000612:	b510      	push	{r4, lr}
 8000614:	0004      	movs	r4, r0
 8000616:	6003      	str	r3, [r0, #0]
 8000618:	6043      	str	r3, [r0, #4]
 800061a:	6083      	str	r3, [r0, #8]
 800061c:	8181      	strh	r1, [r0, #12]
 800061e:	6643      	str	r3, [r0, #100]	; 0x64
 8000620:	81c2      	strh	r2, [r0, #14]
 8000622:	6103      	str	r3, [r0, #16]
 8000624:	6143      	str	r3, [r0, #20]
 8000626:	6183      	str	r3, [r0, #24]
 8000628:	0019      	movs	r1, r3
 800062a:	2208      	movs	r2, #8
 800062c:	305c      	adds	r0, #92	; 0x5c
 800062e:	f000 fa05 	bl	8000a3c <memset>
 8000632:	4b0b      	ldr	r3, [pc, #44]	; (8000660 <std+0x50>)
 8000634:	6224      	str	r4, [r4, #32]
 8000636:	6263      	str	r3, [r4, #36]	; 0x24
 8000638:	4b0a      	ldr	r3, [pc, #40]	; (8000664 <std+0x54>)
 800063a:	62a3      	str	r3, [r4, #40]	; 0x28
 800063c:	4b0a      	ldr	r3, [pc, #40]	; (8000668 <std+0x58>)
 800063e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000640:	4b0a      	ldr	r3, [pc, #40]	; (800066c <std+0x5c>)
 8000642:	6323      	str	r3, [r4, #48]	; 0x30
 8000644:	4b0a      	ldr	r3, [pc, #40]	; (8000670 <std+0x60>)
 8000646:	429c      	cmp	r4, r3
 8000648:	d005      	beq.n	8000656 <std+0x46>
 800064a:	4b0a      	ldr	r3, [pc, #40]	; (8000674 <std+0x64>)
 800064c:	429c      	cmp	r4, r3
 800064e:	d002      	beq.n	8000656 <std+0x46>
 8000650:	4b09      	ldr	r3, [pc, #36]	; (8000678 <std+0x68>)
 8000652:	429c      	cmp	r4, r3
 8000654:	d103      	bne.n	800065e <std+0x4e>
 8000656:	0020      	movs	r0, r4
 8000658:	3058      	adds	r0, #88	; 0x58
 800065a:	f000 fa6f 	bl	8000b3c <__retarget_lock_init_recursive>
 800065e:	bd10      	pop	{r4, pc}
 8000660:	08000859 	.word	0x08000859
 8000664:	08000881 	.word	0x08000881
 8000668:	080008b9 	.word	0x080008b9
 800066c:	080008e5 	.word	0x080008e5
 8000670:	20000080 	.word	0x20000080
 8000674:	200000e8 	.word	0x200000e8
 8000678:	20000150 	.word	0x20000150

0800067c <stdio_exit_handler>:
 800067c:	b510      	push	{r4, lr}
 800067e:	4a03      	ldr	r2, [pc, #12]	; (800068c <stdio_exit_handler+0x10>)
 8000680:	4903      	ldr	r1, [pc, #12]	; (8000690 <stdio_exit_handler+0x14>)
 8000682:	4804      	ldr	r0, [pc, #16]	; (8000694 <stdio_exit_handler+0x18>)
 8000684:	f000 f86c 	bl	8000760 <_fwalk_sglue>
 8000688:	bd10      	pop	{r4, pc}
 800068a:	46c0      	nop			; (mov r8, r8)
 800068c:	20000000 	.word	0x20000000
 8000690:	08000e55 	.word	0x08000e55
 8000694:	2000000c 	.word	0x2000000c

08000698 <cleanup_stdio>:
 8000698:	6841      	ldr	r1, [r0, #4]
 800069a:	4b0b      	ldr	r3, [pc, #44]	; (80006c8 <cleanup_stdio+0x30>)
 800069c:	b510      	push	{r4, lr}
 800069e:	0004      	movs	r4, r0
 80006a0:	4299      	cmp	r1, r3
 80006a2:	d001      	beq.n	80006a8 <cleanup_stdio+0x10>
 80006a4:	f000 fbd6 	bl	8000e54 <_fflush_r>
 80006a8:	68a1      	ldr	r1, [r4, #8]
 80006aa:	4b08      	ldr	r3, [pc, #32]	; (80006cc <cleanup_stdio+0x34>)
 80006ac:	4299      	cmp	r1, r3
 80006ae:	d002      	beq.n	80006b6 <cleanup_stdio+0x1e>
 80006b0:	0020      	movs	r0, r4
 80006b2:	f000 fbcf 	bl	8000e54 <_fflush_r>
 80006b6:	68e1      	ldr	r1, [r4, #12]
 80006b8:	4b05      	ldr	r3, [pc, #20]	; (80006d0 <cleanup_stdio+0x38>)
 80006ba:	4299      	cmp	r1, r3
 80006bc:	d002      	beq.n	80006c4 <cleanup_stdio+0x2c>
 80006be:	0020      	movs	r0, r4
 80006c0:	f000 fbc8 	bl	8000e54 <_fflush_r>
 80006c4:	bd10      	pop	{r4, pc}
 80006c6:	46c0      	nop			; (mov r8, r8)
 80006c8:	20000080 	.word	0x20000080
 80006cc:	200000e8 	.word	0x200000e8
 80006d0:	20000150 	.word	0x20000150

080006d4 <global_stdio_init.part.0>:
 80006d4:	b510      	push	{r4, lr}
 80006d6:	4b09      	ldr	r3, [pc, #36]	; (80006fc <global_stdio_init.part.0+0x28>)
 80006d8:	4a09      	ldr	r2, [pc, #36]	; (8000700 <global_stdio_init.part.0+0x2c>)
 80006da:	2104      	movs	r1, #4
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	4809      	ldr	r0, [pc, #36]	; (8000704 <global_stdio_init.part.0+0x30>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	f7ff ff95 	bl	8000610 <std>
 80006e6:	2201      	movs	r2, #1
 80006e8:	2109      	movs	r1, #9
 80006ea:	4807      	ldr	r0, [pc, #28]	; (8000708 <global_stdio_init.part.0+0x34>)
 80006ec:	f7ff ff90 	bl	8000610 <std>
 80006f0:	2202      	movs	r2, #2
 80006f2:	2112      	movs	r1, #18
 80006f4:	4805      	ldr	r0, [pc, #20]	; (800070c <global_stdio_init.part.0+0x38>)
 80006f6:	f7ff ff8b 	bl	8000610 <std>
 80006fa:	bd10      	pop	{r4, pc}
 80006fc:	200001b8 	.word	0x200001b8
 8000700:	0800067d 	.word	0x0800067d
 8000704:	20000080 	.word	0x20000080
 8000708:	200000e8 	.word	0x200000e8
 800070c:	20000150 	.word	0x20000150

08000710 <__sfp_lock_acquire>:
 8000710:	b510      	push	{r4, lr}
 8000712:	4802      	ldr	r0, [pc, #8]	; (800071c <__sfp_lock_acquire+0xc>)
 8000714:	f000 fa13 	bl	8000b3e <__retarget_lock_acquire_recursive>
 8000718:	bd10      	pop	{r4, pc}
 800071a:	46c0      	nop			; (mov r8, r8)
 800071c:	200001c1 	.word	0x200001c1

08000720 <__sfp_lock_release>:
 8000720:	b510      	push	{r4, lr}
 8000722:	4802      	ldr	r0, [pc, #8]	; (800072c <__sfp_lock_release+0xc>)
 8000724:	f000 fa0c 	bl	8000b40 <__retarget_lock_release_recursive>
 8000728:	bd10      	pop	{r4, pc}
 800072a:	46c0      	nop			; (mov r8, r8)
 800072c:	200001c1 	.word	0x200001c1

08000730 <__sinit>:
 8000730:	b510      	push	{r4, lr}
 8000732:	0004      	movs	r4, r0
 8000734:	f7ff ffec 	bl	8000710 <__sfp_lock_acquire>
 8000738:	6a23      	ldr	r3, [r4, #32]
 800073a:	2b00      	cmp	r3, #0
 800073c:	d002      	beq.n	8000744 <__sinit+0x14>
 800073e:	f7ff ffef 	bl	8000720 <__sfp_lock_release>
 8000742:	bd10      	pop	{r4, pc}
 8000744:	4b04      	ldr	r3, [pc, #16]	; (8000758 <__sinit+0x28>)
 8000746:	6223      	str	r3, [r4, #32]
 8000748:	4b04      	ldr	r3, [pc, #16]	; (800075c <__sinit+0x2c>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d1f6      	bne.n	800073e <__sinit+0xe>
 8000750:	f7ff ffc0 	bl	80006d4 <global_stdio_init.part.0>
 8000754:	e7f3      	b.n	800073e <__sinit+0xe>
 8000756:	46c0      	nop			; (mov r8, r8)
 8000758:	08000699 	.word	0x08000699
 800075c:	200001b8 	.word	0x200001b8

08000760 <_fwalk_sglue>:
 8000760:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000762:	0014      	movs	r4, r2
 8000764:	2600      	movs	r6, #0
 8000766:	9000      	str	r0, [sp, #0]
 8000768:	9101      	str	r1, [sp, #4]
 800076a:	68a5      	ldr	r5, [r4, #8]
 800076c:	6867      	ldr	r7, [r4, #4]
 800076e:	3f01      	subs	r7, #1
 8000770:	d504      	bpl.n	800077c <_fwalk_sglue+0x1c>
 8000772:	6824      	ldr	r4, [r4, #0]
 8000774:	2c00      	cmp	r4, #0
 8000776:	d1f8      	bne.n	800076a <_fwalk_sglue+0xa>
 8000778:	0030      	movs	r0, r6
 800077a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800077c:	89ab      	ldrh	r3, [r5, #12]
 800077e:	2b01      	cmp	r3, #1
 8000780:	d908      	bls.n	8000794 <_fwalk_sglue+0x34>
 8000782:	220e      	movs	r2, #14
 8000784:	5eab      	ldrsh	r3, [r5, r2]
 8000786:	3301      	adds	r3, #1
 8000788:	d004      	beq.n	8000794 <_fwalk_sglue+0x34>
 800078a:	0029      	movs	r1, r5
 800078c:	9800      	ldr	r0, [sp, #0]
 800078e:	9b01      	ldr	r3, [sp, #4]
 8000790:	4798      	blx	r3
 8000792:	4306      	orrs	r6, r0
 8000794:	3568      	adds	r5, #104	; 0x68
 8000796:	e7ea      	b.n	800076e <_fwalk_sglue+0xe>

08000798 <_puts_r>:
 8000798:	6a03      	ldr	r3, [r0, #32]
 800079a:	b570      	push	{r4, r5, r6, lr}
 800079c:	0005      	movs	r5, r0
 800079e:	000e      	movs	r6, r1
 80007a0:	6884      	ldr	r4, [r0, #8]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d101      	bne.n	80007aa <_puts_r+0x12>
 80007a6:	f7ff ffc3 	bl	8000730 <__sinit>
 80007aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80007ac:	07db      	lsls	r3, r3, #31
 80007ae:	d405      	bmi.n	80007bc <_puts_r+0x24>
 80007b0:	89a3      	ldrh	r3, [r4, #12]
 80007b2:	059b      	lsls	r3, r3, #22
 80007b4:	d402      	bmi.n	80007bc <_puts_r+0x24>
 80007b6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80007b8:	f000 f9c1 	bl	8000b3e <__retarget_lock_acquire_recursive>
 80007bc:	89a3      	ldrh	r3, [r4, #12]
 80007be:	071b      	lsls	r3, r3, #28
 80007c0:	d502      	bpl.n	80007c8 <_puts_r+0x30>
 80007c2:	6923      	ldr	r3, [r4, #16]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d11f      	bne.n	8000808 <_puts_r+0x70>
 80007c8:	0021      	movs	r1, r4
 80007ca:	0028      	movs	r0, r5
 80007cc:	f000 f8d2 	bl	8000974 <__swsetup_r>
 80007d0:	2800      	cmp	r0, #0
 80007d2:	d019      	beq.n	8000808 <_puts_r+0x70>
 80007d4:	2501      	movs	r5, #1
 80007d6:	426d      	negs	r5, r5
 80007d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80007da:	07db      	lsls	r3, r3, #31
 80007dc:	d405      	bmi.n	80007ea <_puts_r+0x52>
 80007de:	89a3      	ldrh	r3, [r4, #12]
 80007e0:	059b      	lsls	r3, r3, #22
 80007e2:	d402      	bmi.n	80007ea <_puts_r+0x52>
 80007e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80007e6:	f000 f9ab 	bl	8000b40 <__retarget_lock_release_recursive>
 80007ea:	0028      	movs	r0, r5
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	3601      	adds	r6, #1
 80007f0:	60a3      	str	r3, [r4, #8]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	da04      	bge.n	8000800 <_puts_r+0x68>
 80007f6:	69a2      	ldr	r2, [r4, #24]
 80007f8:	429a      	cmp	r2, r3
 80007fa:	dc16      	bgt.n	800082a <_puts_r+0x92>
 80007fc:	290a      	cmp	r1, #10
 80007fe:	d014      	beq.n	800082a <_puts_r+0x92>
 8000800:	6823      	ldr	r3, [r4, #0]
 8000802:	1c5a      	adds	r2, r3, #1
 8000804:	6022      	str	r2, [r4, #0]
 8000806:	7019      	strb	r1, [r3, #0]
 8000808:	68a3      	ldr	r3, [r4, #8]
 800080a:	7831      	ldrb	r1, [r6, #0]
 800080c:	3b01      	subs	r3, #1
 800080e:	2900      	cmp	r1, #0
 8000810:	d1ed      	bne.n	80007ee <_puts_r+0x56>
 8000812:	60a3      	str	r3, [r4, #8]
 8000814:	2b00      	cmp	r3, #0
 8000816:	da0f      	bge.n	8000838 <_puts_r+0xa0>
 8000818:	0028      	movs	r0, r5
 800081a:	0022      	movs	r2, r4
 800081c:	310a      	adds	r1, #10
 800081e:	f000 f867 	bl	80008f0 <__swbuf_r>
 8000822:	250a      	movs	r5, #10
 8000824:	3001      	adds	r0, #1
 8000826:	d1d7      	bne.n	80007d8 <_puts_r+0x40>
 8000828:	e7d4      	b.n	80007d4 <_puts_r+0x3c>
 800082a:	0022      	movs	r2, r4
 800082c:	0028      	movs	r0, r5
 800082e:	f000 f85f 	bl	80008f0 <__swbuf_r>
 8000832:	3001      	adds	r0, #1
 8000834:	d1e8      	bne.n	8000808 <_puts_r+0x70>
 8000836:	e7cd      	b.n	80007d4 <_puts_r+0x3c>
 8000838:	250a      	movs	r5, #10
 800083a:	6823      	ldr	r3, [r4, #0]
 800083c:	1c5a      	adds	r2, r3, #1
 800083e:	6022      	str	r2, [r4, #0]
 8000840:	701d      	strb	r5, [r3, #0]
 8000842:	e7c9      	b.n	80007d8 <_puts_r+0x40>

08000844 <puts>:
 8000844:	b510      	push	{r4, lr}
 8000846:	4b03      	ldr	r3, [pc, #12]	; (8000854 <puts+0x10>)
 8000848:	0001      	movs	r1, r0
 800084a:	6818      	ldr	r0, [r3, #0]
 800084c:	f7ff ffa4 	bl	8000798 <_puts_r>
 8000850:	bd10      	pop	{r4, pc}
 8000852:	46c0      	nop			; (mov r8, r8)
 8000854:	20000058 	.word	0x20000058

08000858 <__sread>:
 8000858:	b570      	push	{r4, r5, r6, lr}
 800085a:	000c      	movs	r4, r1
 800085c:	250e      	movs	r5, #14
 800085e:	5f49      	ldrsh	r1, [r1, r5]
 8000860:	f000 f91a 	bl	8000a98 <_read_r>
 8000864:	2800      	cmp	r0, #0
 8000866:	db03      	blt.n	8000870 <__sread+0x18>
 8000868:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800086a:	181b      	adds	r3, r3, r0
 800086c:	6563      	str	r3, [r4, #84]	; 0x54
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	89a3      	ldrh	r3, [r4, #12]
 8000872:	4a02      	ldr	r2, [pc, #8]	; (800087c <__sread+0x24>)
 8000874:	4013      	ands	r3, r2
 8000876:	81a3      	strh	r3, [r4, #12]
 8000878:	e7f9      	b.n	800086e <__sread+0x16>
 800087a:	46c0      	nop			; (mov r8, r8)
 800087c:	ffffefff 	.word	0xffffefff

08000880 <__swrite>:
 8000880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000882:	001f      	movs	r7, r3
 8000884:	898b      	ldrh	r3, [r1, #12]
 8000886:	0005      	movs	r5, r0
 8000888:	000c      	movs	r4, r1
 800088a:	0016      	movs	r6, r2
 800088c:	05db      	lsls	r3, r3, #23
 800088e:	d505      	bpl.n	800089c <__swrite+0x1c>
 8000890:	230e      	movs	r3, #14
 8000892:	5ec9      	ldrsh	r1, [r1, r3]
 8000894:	2200      	movs	r2, #0
 8000896:	2302      	movs	r3, #2
 8000898:	f000 f8ea 	bl	8000a70 <_lseek_r>
 800089c:	89a3      	ldrh	r3, [r4, #12]
 800089e:	4a05      	ldr	r2, [pc, #20]	; (80008b4 <__swrite+0x34>)
 80008a0:	0028      	movs	r0, r5
 80008a2:	4013      	ands	r3, r2
 80008a4:	81a3      	strh	r3, [r4, #12]
 80008a6:	0032      	movs	r2, r6
 80008a8:	230e      	movs	r3, #14
 80008aa:	5ee1      	ldrsh	r1, [r4, r3]
 80008ac:	003b      	movs	r3, r7
 80008ae:	f000 f907 	bl	8000ac0 <_write_r>
 80008b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008b4:	ffffefff 	.word	0xffffefff

080008b8 <__sseek>:
 80008b8:	b570      	push	{r4, r5, r6, lr}
 80008ba:	000c      	movs	r4, r1
 80008bc:	250e      	movs	r5, #14
 80008be:	5f49      	ldrsh	r1, [r1, r5]
 80008c0:	f000 f8d6 	bl	8000a70 <_lseek_r>
 80008c4:	89a3      	ldrh	r3, [r4, #12]
 80008c6:	1c42      	adds	r2, r0, #1
 80008c8:	d103      	bne.n	80008d2 <__sseek+0x1a>
 80008ca:	4a05      	ldr	r2, [pc, #20]	; (80008e0 <__sseek+0x28>)
 80008cc:	4013      	ands	r3, r2
 80008ce:	81a3      	strh	r3, [r4, #12]
 80008d0:	bd70      	pop	{r4, r5, r6, pc}
 80008d2:	2280      	movs	r2, #128	; 0x80
 80008d4:	0152      	lsls	r2, r2, #5
 80008d6:	4313      	orrs	r3, r2
 80008d8:	81a3      	strh	r3, [r4, #12]
 80008da:	6560      	str	r0, [r4, #84]	; 0x54
 80008dc:	e7f8      	b.n	80008d0 <__sseek+0x18>
 80008de:	46c0      	nop			; (mov r8, r8)
 80008e0:	ffffefff 	.word	0xffffefff

080008e4 <__sclose>:
 80008e4:	b510      	push	{r4, lr}
 80008e6:	230e      	movs	r3, #14
 80008e8:	5ec9      	ldrsh	r1, [r1, r3]
 80008ea:	f000 f8af 	bl	8000a4c <_close_r>
 80008ee:	bd10      	pop	{r4, pc}

080008f0 <__swbuf_r>:
 80008f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008f2:	0006      	movs	r6, r0
 80008f4:	000d      	movs	r5, r1
 80008f6:	0014      	movs	r4, r2
 80008f8:	2800      	cmp	r0, #0
 80008fa:	d004      	beq.n	8000906 <__swbuf_r+0x16>
 80008fc:	6a03      	ldr	r3, [r0, #32]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d101      	bne.n	8000906 <__swbuf_r+0x16>
 8000902:	f7ff ff15 	bl	8000730 <__sinit>
 8000906:	69a3      	ldr	r3, [r4, #24]
 8000908:	60a3      	str	r3, [r4, #8]
 800090a:	89a3      	ldrh	r3, [r4, #12]
 800090c:	071b      	lsls	r3, r3, #28
 800090e:	d528      	bpl.n	8000962 <__swbuf_r+0x72>
 8000910:	6923      	ldr	r3, [r4, #16]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d025      	beq.n	8000962 <__swbuf_r+0x72>
 8000916:	6923      	ldr	r3, [r4, #16]
 8000918:	6820      	ldr	r0, [r4, #0]
 800091a:	b2ef      	uxtb	r7, r5
 800091c:	1ac0      	subs	r0, r0, r3
 800091e:	6963      	ldr	r3, [r4, #20]
 8000920:	b2ed      	uxtb	r5, r5
 8000922:	4283      	cmp	r3, r0
 8000924:	dc05      	bgt.n	8000932 <__swbuf_r+0x42>
 8000926:	0021      	movs	r1, r4
 8000928:	0030      	movs	r0, r6
 800092a:	f000 fa93 	bl	8000e54 <_fflush_r>
 800092e:	2800      	cmp	r0, #0
 8000930:	d11d      	bne.n	800096e <__swbuf_r+0x7e>
 8000932:	68a3      	ldr	r3, [r4, #8]
 8000934:	3001      	adds	r0, #1
 8000936:	3b01      	subs	r3, #1
 8000938:	60a3      	str	r3, [r4, #8]
 800093a:	6823      	ldr	r3, [r4, #0]
 800093c:	1c5a      	adds	r2, r3, #1
 800093e:	6022      	str	r2, [r4, #0]
 8000940:	701f      	strb	r7, [r3, #0]
 8000942:	6963      	ldr	r3, [r4, #20]
 8000944:	4283      	cmp	r3, r0
 8000946:	d004      	beq.n	8000952 <__swbuf_r+0x62>
 8000948:	89a3      	ldrh	r3, [r4, #12]
 800094a:	07db      	lsls	r3, r3, #31
 800094c:	d507      	bpl.n	800095e <__swbuf_r+0x6e>
 800094e:	2d0a      	cmp	r5, #10
 8000950:	d105      	bne.n	800095e <__swbuf_r+0x6e>
 8000952:	0021      	movs	r1, r4
 8000954:	0030      	movs	r0, r6
 8000956:	f000 fa7d 	bl	8000e54 <_fflush_r>
 800095a:	2800      	cmp	r0, #0
 800095c:	d107      	bne.n	800096e <__swbuf_r+0x7e>
 800095e:	0028      	movs	r0, r5
 8000960:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000962:	0021      	movs	r1, r4
 8000964:	0030      	movs	r0, r6
 8000966:	f000 f805 	bl	8000974 <__swsetup_r>
 800096a:	2800      	cmp	r0, #0
 800096c:	d0d3      	beq.n	8000916 <__swbuf_r+0x26>
 800096e:	2501      	movs	r5, #1
 8000970:	426d      	negs	r5, r5
 8000972:	e7f4      	b.n	800095e <__swbuf_r+0x6e>

08000974 <__swsetup_r>:
 8000974:	4b30      	ldr	r3, [pc, #192]	; (8000a38 <__swsetup_r+0xc4>)
 8000976:	b570      	push	{r4, r5, r6, lr}
 8000978:	0005      	movs	r5, r0
 800097a:	6818      	ldr	r0, [r3, #0]
 800097c:	000c      	movs	r4, r1
 800097e:	2800      	cmp	r0, #0
 8000980:	d004      	beq.n	800098c <__swsetup_r+0x18>
 8000982:	6a03      	ldr	r3, [r0, #32]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d101      	bne.n	800098c <__swsetup_r+0x18>
 8000988:	f7ff fed2 	bl	8000730 <__sinit>
 800098c:	230c      	movs	r3, #12
 800098e:	5ee2      	ldrsh	r2, [r4, r3]
 8000990:	b293      	uxth	r3, r2
 8000992:	0711      	lsls	r1, r2, #28
 8000994:	d423      	bmi.n	80009de <__swsetup_r+0x6a>
 8000996:	06d9      	lsls	r1, r3, #27
 8000998:	d407      	bmi.n	80009aa <__swsetup_r+0x36>
 800099a:	2309      	movs	r3, #9
 800099c:	2001      	movs	r0, #1
 800099e:	602b      	str	r3, [r5, #0]
 80009a0:	3337      	adds	r3, #55	; 0x37
 80009a2:	4313      	orrs	r3, r2
 80009a4:	81a3      	strh	r3, [r4, #12]
 80009a6:	4240      	negs	r0, r0
 80009a8:	bd70      	pop	{r4, r5, r6, pc}
 80009aa:	075b      	lsls	r3, r3, #29
 80009ac:	d513      	bpl.n	80009d6 <__swsetup_r+0x62>
 80009ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80009b0:	2900      	cmp	r1, #0
 80009b2:	d008      	beq.n	80009c6 <__swsetup_r+0x52>
 80009b4:	0023      	movs	r3, r4
 80009b6:	3344      	adds	r3, #68	; 0x44
 80009b8:	4299      	cmp	r1, r3
 80009ba:	d002      	beq.n	80009c2 <__swsetup_r+0x4e>
 80009bc:	0028      	movs	r0, r5
 80009be:	f000 f8c1 	bl	8000b44 <_free_r>
 80009c2:	2300      	movs	r3, #0
 80009c4:	6363      	str	r3, [r4, #52]	; 0x34
 80009c6:	2224      	movs	r2, #36	; 0x24
 80009c8:	89a3      	ldrh	r3, [r4, #12]
 80009ca:	4393      	bics	r3, r2
 80009cc:	81a3      	strh	r3, [r4, #12]
 80009ce:	2300      	movs	r3, #0
 80009d0:	6063      	str	r3, [r4, #4]
 80009d2:	6923      	ldr	r3, [r4, #16]
 80009d4:	6023      	str	r3, [r4, #0]
 80009d6:	2308      	movs	r3, #8
 80009d8:	89a2      	ldrh	r2, [r4, #12]
 80009da:	4313      	orrs	r3, r2
 80009dc:	81a3      	strh	r3, [r4, #12]
 80009de:	6923      	ldr	r3, [r4, #16]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d10b      	bne.n	80009fc <__swsetup_r+0x88>
 80009e4:	21a0      	movs	r1, #160	; 0xa0
 80009e6:	2280      	movs	r2, #128	; 0x80
 80009e8:	89a3      	ldrh	r3, [r4, #12]
 80009ea:	0089      	lsls	r1, r1, #2
 80009ec:	0092      	lsls	r2, r2, #2
 80009ee:	400b      	ands	r3, r1
 80009f0:	4293      	cmp	r3, r2
 80009f2:	d003      	beq.n	80009fc <__swsetup_r+0x88>
 80009f4:	0021      	movs	r1, r4
 80009f6:	0028      	movs	r0, r5
 80009f8:	f000 fa80 	bl	8000efc <__smakebuf_r>
 80009fc:	220c      	movs	r2, #12
 80009fe:	5ea3      	ldrsh	r3, [r4, r2]
 8000a00:	2001      	movs	r0, #1
 8000a02:	001a      	movs	r2, r3
 8000a04:	b299      	uxth	r1, r3
 8000a06:	4002      	ands	r2, r0
 8000a08:	4203      	tst	r3, r0
 8000a0a:	d00f      	beq.n	8000a2c <__swsetup_r+0xb8>
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	60a2      	str	r2, [r4, #8]
 8000a10:	6962      	ldr	r2, [r4, #20]
 8000a12:	4252      	negs	r2, r2
 8000a14:	61a2      	str	r2, [r4, #24]
 8000a16:	2000      	movs	r0, #0
 8000a18:	6922      	ldr	r2, [r4, #16]
 8000a1a:	4282      	cmp	r2, r0
 8000a1c:	d1c4      	bne.n	80009a8 <__swsetup_r+0x34>
 8000a1e:	0609      	lsls	r1, r1, #24
 8000a20:	d5c2      	bpl.n	80009a8 <__swsetup_r+0x34>
 8000a22:	2240      	movs	r2, #64	; 0x40
 8000a24:	4313      	orrs	r3, r2
 8000a26:	81a3      	strh	r3, [r4, #12]
 8000a28:	3801      	subs	r0, #1
 8000a2a:	e7bd      	b.n	80009a8 <__swsetup_r+0x34>
 8000a2c:	0788      	lsls	r0, r1, #30
 8000a2e:	d400      	bmi.n	8000a32 <__swsetup_r+0xbe>
 8000a30:	6962      	ldr	r2, [r4, #20]
 8000a32:	60a2      	str	r2, [r4, #8]
 8000a34:	e7ef      	b.n	8000a16 <__swsetup_r+0xa2>
 8000a36:	46c0      	nop			; (mov r8, r8)
 8000a38:	20000058 	.word	0x20000058

08000a3c <memset>:
 8000a3c:	0003      	movs	r3, r0
 8000a3e:	1882      	adds	r2, r0, r2
 8000a40:	4293      	cmp	r3, r2
 8000a42:	d100      	bne.n	8000a46 <memset+0xa>
 8000a44:	4770      	bx	lr
 8000a46:	7019      	strb	r1, [r3, #0]
 8000a48:	3301      	adds	r3, #1
 8000a4a:	e7f9      	b.n	8000a40 <memset+0x4>

08000a4c <_close_r>:
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	b570      	push	{r4, r5, r6, lr}
 8000a50:	4d06      	ldr	r5, [pc, #24]	; (8000a6c <_close_r+0x20>)
 8000a52:	0004      	movs	r4, r0
 8000a54:	0008      	movs	r0, r1
 8000a56:	602b      	str	r3, [r5, #0]
 8000a58:	f7ff fc7b 	bl	8000352 <_close>
 8000a5c:	1c43      	adds	r3, r0, #1
 8000a5e:	d103      	bne.n	8000a68 <_close_r+0x1c>
 8000a60:	682b      	ldr	r3, [r5, #0]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d000      	beq.n	8000a68 <_close_r+0x1c>
 8000a66:	6023      	str	r3, [r4, #0]
 8000a68:	bd70      	pop	{r4, r5, r6, pc}
 8000a6a:	46c0      	nop			; (mov r8, r8)
 8000a6c:	200001bc 	.word	0x200001bc

08000a70 <_lseek_r>:
 8000a70:	b570      	push	{r4, r5, r6, lr}
 8000a72:	0004      	movs	r4, r0
 8000a74:	0008      	movs	r0, r1
 8000a76:	0011      	movs	r1, r2
 8000a78:	001a      	movs	r2, r3
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	4d05      	ldr	r5, [pc, #20]	; (8000a94 <_lseek_r+0x24>)
 8000a7e:	602b      	str	r3, [r5, #0]
 8000a80:	f7ff fc88 	bl	8000394 <_lseek>
 8000a84:	1c43      	adds	r3, r0, #1
 8000a86:	d103      	bne.n	8000a90 <_lseek_r+0x20>
 8000a88:	682b      	ldr	r3, [r5, #0]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d000      	beq.n	8000a90 <_lseek_r+0x20>
 8000a8e:	6023      	str	r3, [r4, #0]
 8000a90:	bd70      	pop	{r4, r5, r6, pc}
 8000a92:	46c0      	nop			; (mov r8, r8)
 8000a94:	200001bc 	.word	0x200001bc

08000a98 <_read_r>:
 8000a98:	b570      	push	{r4, r5, r6, lr}
 8000a9a:	0004      	movs	r4, r0
 8000a9c:	0008      	movs	r0, r1
 8000a9e:	0011      	movs	r1, r2
 8000aa0:	001a      	movs	r2, r3
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	4d05      	ldr	r5, [pc, #20]	; (8000abc <_read_r+0x24>)
 8000aa6:	602b      	str	r3, [r5, #0]
 8000aa8:	f7ff fc1a 	bl	80002e0 <_read>
 8000aac:	1c43      	adds	r3, r0, #1
 8000aae:	d103      	bne.n	8000ab8 <_read_r+0x20>
 8000ab0:	682b      	ldr	r3, [r5, #0]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d000      	beq.n	8000ab8 <_read_r+0x20>
 8000ab6:	6023      	str	r3, [r4, #0]
 8000ab8:	bd70      	pop	{r4, r5, r6, pc}
 8000aba:	46c0      	nop			; (mov r8, r8)
 8000abc:	200001bc 	.word	0x200001bc

08000ac0 <_write_r>:
 8000ac0:	b570      	push	{r4, r5, r6, lr}
 8000ac2:	0004      	movs	r4, r0
 8000ac4:	0008      	movs	r0, r1
 8000ac6:	0011      	movs	r1, r2
 8000ac8:	001a      	movs	r2, r3
 8000aca:	2300      	movs	r3, #0
 8000acc:	4d05      	ldr	r5, [pc, #20]	; (8000ae4 <_write_r+0x24>)
 8000ace:	602b      	str	r3, [r5, #0]
 8000ad0:	f7ff fc23 	bl	800031a <_write>
 8000ad4:	1c43      	adds	r3, r0, #1
 8000ad6:	d103      	bne.n	8000ae0 <_write_r+0x20>
 8000ad8:	682b      	ldr	r3, [r5, #0]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d000      	beq.n	8000ae0 <_write_r+0x20>
 8000ade:	6023      	str	r3, [r4, #0]
 8000ae0:	bd70      	pop	{r4, r5, r6, pc}
 8000ae2:	46c0      	nop			; (mov r8, r8)
 8000ae4:	200001bc 	.word	0x200001bc

08000ae8 <__errno>:
 8000ae8:	4b01      	ldr	r3, [pc, #4]	; (8000af0 <__errno+0x8>)
 8000aea:	6818      	ldr	r0, [r3, #0]
 8000aec:	4770      	bx	lr
 8000aee:	46c0      	nop			; (mov r8, r8)
 8000af0:	20000058 	.word	0x20000058

08000af4 <__libc_init_array>:
 8000af4:	b570      	push	{r4, r5, r6, lr}
 8000af6:	2600      	movs	r6, #0
 8000af8:	4c0c      	ldr	r4, [pc, #48]	; (8000b2c <__libc_init_array+0x38>)
 8000afa:	4d0d      	ldr	r5, [pc, #52]	; (8000b30 <__libc_init_array+0x3c>)
 8000afc:	1b64      	subs	r4, r4, r5
 8000afe:	10a4      	asrs	r4, r4, #2
 8000b00:	42a6      	cmp	r6, r4
 8000b02:	d109      	bne.n	8000b18 <__libc_init_array+0x24>
 8000b04:	2600      	movs	r6, #0
 8000b06:	f000 fa6d 	bl	8000fe4 <_init>
 8000b0a:	4c0a      	ldr	r4, [pc, #40]	; (8000b34 <__libc_init_array+0x40>)
 8000b0c:	4d0a      	ldr	r5, [pc, #40]	; (8000b38 <__libc_init_array+0x44>)
 8000b0e:	1b64      	subs	r4, r4, r5
 8000b10:	10a4      	asrs	r4, r4, #2
 8000b12:	42a6      	cmp	r6, r4
 8000b14:	d105      	bne.n	8000b22 <__libc_init_array+0x2e>
 8000b16:	bd70      	pop	{r4, r5, r6, pc}
 8000b18:	00b3      	lsls	r3, r6, #2
 8000b1a:	58eb      	ldr	r3, [r5, r3]
 8000b1c:	4798      	blx	r3
 8000b1e:	3601      	adds	r6, #1
 8000b20:	e7ee      	b.n	8000b00 <__libc_init_array+0xc>
 8000b22:	00b3      	lsls	r3, r6, #2
 8000b24:	58eb      	ldr	r3, [r5, r3]
 8000b26:	4798      	blx	r3
 8000b28:	3601      	adds	r6, #1
 8000b2a:	e7f2      	b.n	8000b12 <__libc_init_array+0x1e>
 8000b2c:	08001024 	.word	0x08001024
 8000b30:	08001024 	.word	0x08001024
 8000b34:	08001028 	.word	0x08001028
 8000b38:	08001024 	.word	0x08001024

08000b3c <__retarget_lock_init_recursive>:
 8000b3c:	4770      	bx	lr

08000b3e <__retarget_lock_acquire_recursive>:
 8000b3e:	4770      	bx	lr

08000b40 <__retarget_lock_release_recursive>:
 8000b40:	4770      	bx	lr
	...

08000b44 <_free_r>:
 8000b44:	b570      	push	{r4, r5, r6, lr}
 8000b46:	0005      	movs	r5, r0
 8000b48:	2900      	cmp	r1, #0
 8000b4a:	d010      	beq.n	8000b6e <_free_r+0x2a>
 8000b4c:	1f0c      	subs	r4, r1, #4
 8000b4e:	6823      	ldr	r3, [r4, #0]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	da00      	bge.n	8000b56 <_free_r+0x12>
 8000b54:	18e4      	adds	r4, r4, r3
 8000b56:	0028      	movs	r0, r5
 8000b58:	f000 f8e2 	bl	8000d20 <__malloc_lock>
 8000b5c:	4a1d      	ldr	r2, [pc, #116]	; (8000bd4 <_free_r+0x90>)
 8000b5e:	6813      	ldr	r3, [r2, #0]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d105      	bne.n	8000b70 <_free_r+0x2c>
 8000b64:	6063      	str	r3, [r4, #4]
 8000b66:	6014      	str	r4, [r2, #0]
 8000b68:	0028      	movs	r0, r5
 8000b6a:	f000 f8e1 	bl	8000d30 <__malloc_unlock>
 8000b6e:	bd70      	pop	{r4, r5, r6, pc}
 8000b70:	42a3      	cmp	r3, r4
 8000b72:	d908      	bls.n	8000b86 <_free_r+0x42>
 8000b74:	6820      	ldr	r0, [r4, #0]
 8000b76:	1821      	adds	r1, r4, r0
 8000b78:	428b      	cmp	r3, r1
 8000b7a:	d1f3      	bne.n	8000b64 <_free_r+0x20>
 8000b7c:	6819      	ldr	r1, [r3, #0]
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	1809      	adds	r1, r1, r0
 8000b82:	6021      	str	r1, [r4, #0]
 8000b84:	e7ee      	b.n	8000b64 <_free_r+0x20>
 8000b86:	001a      	movs	r2, r3
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <_free_r+0x4e>
 8000b8e:	42a3      	cmp	r3, r4
 8000b90:	d9f9      	bls.n	8000b86 <_free_r+0x42>
 8000b92:	6811      	ldr	r1, [r2, #0]
 8000b94:	1850      	adds	r0, r2, r1
 8000b96:	42a0      	cmp	r0, r4
 8000b98:	d10b      	bne.n	8000bb2 <_free_r+0x6e>
 8000b9a:	6820      	ldr	r0, [r4, #0]
 8000b9c:	1809      	adds	r1, r1, r0
 8000b9e:	1850      	adds	r0, r2, r1
 8000ba0:	6011      	str	r1, [r2, #0]
 8000ba2:	4283      	cmp	r3, r0
 8000ba4:	d1e0      	bne.n	8000b68 <_free_r+0x24>
 8000ba6:	6818      	ldr	r0, [r3, #0]
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	1841      	adds	r1, r0, r1
 8000bac:	6011      	str	r1, [r2, #0]
 8000bae:	6053      	str	r3, [r2, #4]
 8000bb0:	e7da      	b.n	8000b68 <_free_r+0x24>
 8000bb2:	42a0      	cmp	r0, r4
 8000bb4:	d902      	bls.n	8000bbc <_free_r+0x78>
 8000bb6:	230c      	movs	r3, #12
 8000bb8:	602b      	str	r3, [r5, #0]
 8000bba:	e7d5      	b.n	8000b68 <_free_r+0x24>
 8000bbc:	6820      	ldr	r0, [r4, #0]
 8000bbe:	1821      	adds	r1, r4, r0
 8000bc0:	428b      	cmp	r3, r1
 8000bc2:	d103      	bne.n	8000bcc <_free_r+0x88>
 8000bc4:	6819      	ldr	r1, [r3, #0]
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	1809      	adds	r1, r1, r0
 8000bca:	6021      	str	r1, [r4, #0]
 8000bcc:	6063      	str	r3, [r4, #4]
 8000bce:	6054      	str	r4, [r2, #4]
 8000bd0:	e7ca      	b.n	8000b68 <_free_r+0x24>
 8000bd2:	46c0      	nop			; (mov r8, r8)
 8000bd4:	200001c4 	.word	0x200001c4

08000bd8 <sbrk_aligned>:
 8000bd8:	b570      	push	{r4, r5, r6, lr}
 8000bda:	4e0f      	ldr	r6, [pc, #60]	; (8000c18 <sbrk_aligned+0x40>)
 8000bdc:	000d      	movs	r5, r1
 8000bde:	6831      	ldr	r1, [r6, #0]
 8000be0:	0004      	movs	r4, r0
 8000be2:	2900      	cmp	r1, #0
 8000be4:	d102      	bne.n	8000bec <sbrk_aligned+0x14>
 8000be6:	f000 f9eb 	bl	8000fc0 <_sbrk_r>
 8000bea:	6030      	str	r0, [r6, #0]
 8000bec:	0029      	movs	r1, r5
 8000bee:	0020      	movs	r0, r4
 8000bf0:	f000 f9e6 	bl	8000fc0 <_sbrk_r>
 8000bf4:	1c43      	adds	r3, r0, #1
 8000bf6:	d00a      	beq.n	8000c0e <sbrk_aligned+0x36>
 8000bf8:	2303      	movs	r3, #3
 8000bfa:	1cc5      	adds	r5, r0, #3
 8000bfc:	439d      	bics	r5, r3
 8000bfe:	42a8      	cmp	r0, r5
 8000c00:	d007      	beq.n	8000c12 <sbrk_aligned+0x3a>
 8000c02:	1a29      	subs	r1, r5, r0
 8000c04:	0020      	movs	r0, r4
 8000c06:	f000 f9db 	bl	8000fc0 <_sbrk_r>
 8000c0a:	3001      	adds	r0, #1
 8000c0c:	d101      	bne.n	8000c12 <sbrk_aligned+0x3a>
 8000c0e:	2501      	movs	r5, #1
 8000c10:	426d      	negs	r5, r5
 8000c12:	0028      	movs	r0, r5
 8000c14:	bd70      	pop	{r4, r5, r6, pc}
 8000c16:	46c0      	nop			; (mov r8, r8)
 8000c18:	200001c8 	.word	0x200001c8

08000c1c <_malloc_r>:
 8000c1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000c1e:	2203      	movs	r2, #3
 8000c20:	1ccb      	adds	r3, r1, #3
 8000c22:	4393      	bics	r3, r2
 8000c24:	3308      	adds	r3, #8
 8000c26:	0006      	movs	r6, r0
 8000c28:	001f      	movs	r7, r3
 8000c2a:	2b0c      	cmp	r3, #12
 8000c2c:	d238      	bcs.n	8000ca0 <_malloc_r+0x84>
 8000c2e:	270c      	movs	r7, #12
 8000c30:	42b9      	cmp	r1, r7
 8000c32:	d837      	bhi.n	8000ca4 <_malloc_r+0x88>
 8000c34:	0030      	movs	r0, r6
 8000c36:	f000 f873 	bl	8000d20 <__malloc_lock>
 8000c3a:	4b38      	ldr	r3, [pc, #224]	; (8000d1c <_malloc_r+0x100>)
 8000c3c:	9300      	str	r3, [sp, #0]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	001c      	movs	r4, r3
 8000c42:	2c00      	cmp	r4, #0
 8000c44:	d133      	bne.n	8000cae <_malloc_r+0x92>
 8000c46:	0039      	movs	r1, r7
 8000c48:	0030      	movs	r0, r6
 8000c4a:	f7ff ffc5 	bl	8000bd8 <sbrk_aligned>
 8000c4e:	0004      	movs	r4, r0
 8000c50:	1c43      	adds	r3, r0, #1
 8000c52:	d15e      	bne.n	8000d12 <_malloc_r+0xf6>
 8000c54:	9b00      	ldr	r3, [sp, #0]
 8000c56:	681c      	ldr	r4, [r3, #0]
 8000c58:	0025      	movs	r5, r4
 8000c5a:	2d00      	cmp	r5, #0
 8000c5c:	d14e      	bne.n	8000cfc <_malloc_r+0xe0>
 8000c5e:	2c00      	cmp	r4, #0
 8000c60:	d051      	beq.n	8000d06 <_malloc_r+0xea>
 8000c62:	6823      	ldr	r3, [r4, #0]
 8000c64:	0029      	movs	r1, r5
 8000c66:	18e3      	adds	r3, r4, r3
 8000c68:	0030      	movs	r0, r6
 8000c6a:	9301      	str	r3, [sp, #4]
 8000c6c:	f000 f9a8 	bl	8000fc0 <_sbrk_r>
 8000c70:	9b01      	ldr	r3, [sp, #4]
 8000c72:	4283      	cmp	r3, r0
 8000c74:	d147      	bne.n	8000d06 <_malloc_r+0xea>
 8000c76:	6823      	ldr	r3, [r4, #0]
 8000c78:	0030      	movs	r0, r6
 8000c7a:	1aff      	subs	r7, r7, r3
 8000c7c:	0039      	movs	r1, r7
 8000c7e:	f7ff ffab 	bl	8000bd8 <sbrk_aligned>
 8000c82:	3001      	adds	r0, #1
 8000c84:	d03f      	beq.n	8000d06 <_malloc_r+0xea>
 8000c86:	6823      	ldr	r3, [r4, #0]
 8000c88:	19db      	adds	r3, r3, r7
 8000c8a:	6023      	str	r3, [r4, #0]
 8000c8c:	9b00      	ldr	r3, [sp, #0]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d040      	beq.n	8000d16 <_malloc_r+0xfa>
 8000c94:	685a      	ldr	r2, [r3, #4]
 8000c96:	42a2      	cmp	r2, r4
 8000c98:	d133      	bne.n	8000d02 <_malloc_r+0xe6>
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	e014      	b.n	8000cca <_malloc_r+0xae>
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	dac5      	bge.n	8000c30 <_malloc_r+0x14>
 8000ca4:	230c      	movs	r3, #12
 8000ca6:	2500      	movs	r5, #0
 8000ca8:	6033      	str	r3, [r6, #0]
 8000caa:	0028      	movs	r0, r5
 8000cac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8000cae:	6821      	ldr	r1, [r4, #0]
 8000cb0:	1bc9      	subs	r1, r1, r7
 8000cb2:	d420      	bmi.n	8000cf6 <_malloc_r+0xda>
 8000cb4:	290b      	cmp	r1, #11
 8000cb6:	d918      	bls.n	8000cea <_malloc_r+0xce>
 8000cb8:	19e2      	adds	r2, r4, r7
 8000cba:	6027      	str	r7, [r4, #0]
 8000cbc:	42a3      	cmp	r3, r4
 8000cbe:	d112      	bne.n	8000ce6 <_malloc_r+0xca>
 8000cc0:	9b00      	ldr	r3, [sp, #0]
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	6863      	ldr	r3, [r4, #4]
 8000cc6:	6011      	str	r1, [r2, #0]
 8000cc8:	6053      	str	r3, [r2, #4]
 8000cca:	0030      	movs	r0, r6
 8000ccc:	0025      	movs	r5, r4
 8000cce:	f000 f82f 	bl	8000d30 <__malloc_unlock>
 8000cd2:	2207      	movs	r2, #7
 8000cd4:	350b      	adds	r5, #11
 8000cd6:	1d23      	adds	r3, r4, #4
 8000cd8:	4395      	bics	r5, r2
 8000cda:	1aea      	subs	r2, r5, r3
 8000cdc:	429d      	cmp	r5, r3
 8000cde:	d0e4      	beq.n	8000caa <_malloc_r+0x8e>
 8000ce0:	1b5b      	subs	r3, r3, r5
 8000ce2:	50a3      	str	r3, [r4, r2]
 8000ce4:	e7e1      	b.n	8000caa <_malloc_r+0x8e>
 8000ce6:	605a      	str	r2, [r3, #4]
 8000ce8:	e7ec      	b.n	8000cc4 <_malloc_r+0xa8>
 8000cea:	6862      	ldr	r2, [r4, #4]
 8000cec:	42a3      	cmp	r3, r4
 8000cee:	d1d5      	bne.n	8000c9c <_malloc_r+0x80>
 8000cf0:	9b00      	ldr	r3, [sp, #0]
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	e7e9      	b.n	8000cca <_malloc_r+0xae>
 8000cf6:	0023      	movs	r3, r4
 8000cf8:	6864      	ldr	r4, [r4, #4]
 8000cfa:	e7a2      	b.n	8000c42 <_malloc_r+0x26>
 8000cfc:	002c      	movs	r4, r5
 8000cfe:	686d      	ldr	r5, [r5, #4]
 8000d00:	e7ab      	b.n	8000c5a <_malloc_r+0x3e>
 8000d02:	0013      	movs	r3, r2
 8000d04:	e7c4      	b.n	8000c90 <_malloc_r+0x74>
 8000d06:	230c      	movs	r3, #12
 8000d08:	0030      	movs	r0, r6
 8000d0a:	6033      	str	r3, [r6, #0]
 8000d0c:	f000 f810 	bl	8000d30 <__malloc_unlock>
 8000d10:	e7cb      	b.n	8000caa <_malloc_r+0x8e>
 8000d12:	6027      	str	r7, [r4, #0]
 8000d14:	e7d9      	b.n	8000cca <_malloc_r+0xae>
 8000d16:	605b      	str	r3, [r3, #4]
 8000d18:	deff      	udf	#255	; 0xff
 8000d1a:	46c0      	nop			; (mov r8, r8)
 8000d1c:	200001c4 	.word	0x200001c4

08000d20 <__malloc_lock>:
 8000d20:	b510      	push	{r4, lr}
 8000d22:	4802      	ldr	r0, [pc, #8]	; (8000d2c <__malloc_lock+0xc>)
 8000d24:	f7ff ff0b 	bl	8000b3e <__retarget_lock_acquire_recursive>
 8000d28:	bd10      	pop	{r4, pc}
 8000d2a:	46c0      	nop			; (mov r8, r8)
 8000d2c:	200001c0 	.word	0x200001c0

08000d30 <__malloc_unlock>:
 8000d30:	b510      	push	{r4, lr}
 8000d32:	4802      	ldr	r0, [pc, #8]	; (8000d3c <__malloc_unlock+0xc>)
 8000d34:	f7ff ff04 	bl	8000b40 <__retarget_lock_release_recursive>
 8000d38:	bd10      	pop	{r4, pc}
 8000d3a:	46c0      	nop			; (mov r8, r8)
 8000d3c:	200001c0 	.word	0x200001c0

08000d40 <__sflush_r>:
 8000d40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000d42:	898b      	ldrh	r3, [r1, #12]
 8000d44:	0005      	movs	r5, r0
 8000d46:	000c      	movs	r4, r1
 8000d48:	071a      	lsls	r2, r3, #28
 8000d4a:	d45c      	bmi.n	8000e06 <__sflush_r+0xc6>
 8000d4c:	684a      	ldr	r2, [r1, #4]
 8000d4e:	2a00      	cmp	r2, #0
 8000d50:	dc04      	bgt.n	8000d5c <__sflush_r+0x1c>
 8000d52:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8000d54:	2a00      	cmp	r2, #0
 8000d56:	dc01      	bgt.n	8000d5c <__sflush_r+0x1c>
 8000d58:	2000      	movs	r0, #0
 8000d5a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8000d5c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8000d5e:	2f00      	cmp	r7, #0
 8000d60:	d0fa      	beq.n	8000d58 <__sflush_r+0x18>
 8000d62:	2200      	movs	r2, #0
 8000d64:	2080      	movs	r0, #128	; 0x80
 8000d66:	682e      	ldr	r6, [r5, #0]
 8000d68:	602a      	str	r2, [r5, #0]
 8000d6a:	001a      	movs	r2, r3
 8000d6c:	0140      	lsls	r0, r0, #5
 8000d6e:	6a21      	ldr	r1, [r4, #32]
 8000d70:	4002      	ands	r2, r0
 8000d72:	4203      	tst	r3, r0
 8000d74:	d034      	beq.n	8000de0 <__sflush_r+0xa0>
 8000d76:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000d78:	89a3      	ldrh	r3, [r4, #12]
 8000d7a:	075b      	lsls	r3, r3, #29
 8000d7c:	d506      	bpl.n	8000d8c <__sflush_r+0x4c>
 8000d7e:	6863      	ldr	r3, [r4, #4]
 8000d80:	1ac0      	subs	r0, r0, r3
 8000d82:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <__sflush_r+0x4c>
 8000d88:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000d8a:	1ac0      	subs	r0, r0, r3
 8000d8c:	0002      	movs	r2, r0
 8000d8e:	2300      	movs	r3, #0
 8000d90:	0028      	movs	r0, r5
 8000d92:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8000d94:	6a21      	ldr	r1, [r4, #32]
 8000d96:	47b8      	blx	r7
 8000d98:	89a2      	ldrh	r2, [r4, #12]
 8000d9a:	1c43      	adds	r3, r0, #1
 8000d9c:	d106      	bne.n	8000dac <__sflush_r+0x6c>
 8000d9e:	6829      	ldr	r1, [r5, #0]
 8000da0:	291d      	cmp	r1, #29
 8000da2:	d82c      	bhi.n	8000dfe <__sflush_r+0xbe>
 8000da4:	4b2a      	ldr	r3, [pc, #168]	; (8000e50 <__sflush_r+0x110>)
 8000da6:	410b      	asrs	r3, r1
 8000da8:	07db      	lsls	r3, r3, #31
 8000daa:	d428      	bmi.n	8000dfe <__sflush_r+0xbe>
 8000dac:	2300      	movs	r3, #0
 8000dae:	6063      	str	r3, [r4, #4]
 8000db0:	6923      	ldr	r3, [r4, #16]
 8000db2:	6023      	str	r3, [r4, #0]
 8000db4:	04d2      	lsls	r2, r2, #19
 8000db6:	d505      	bpl.n	8000dc4 <__sflush_r+0x84>
 8000db8:	1c43      	adds	r3, r0, #1
 8000dba:	d102      	bne.n	8000dc2 <__sflush_r+0x82>
 8000dbc:	682b      	ldr	r3, [r5, #0]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d100      	bne.n	8000dc4 <__sflush_r+0x84>
 8000dc2:	6560      	str	r0, [r4, #84]	; 0x54
 8000dc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000dc6:	602e      	str	r6, [r5, #0]
 8000dc8:	2900      	cmp	r1, #0
 8000dca:	d0c5      	beq.n	8000d58 <__sflush_r+0x18>
 8000dcc:	0023      	movs	r3, r4
 8000dce:	3344      	adds	r3, #68	; 0x44
 8000dd0:	4299      	cmp	r1, r3
 8000dd2:	d002      	beq.n	8000dda <__sflush_r+0x9a>
 8000dd4:	0028      	movs	r0, r5
 8000dd6:	f7ff feb5 	bl	8000b44 <_free_r>
 8000dda:	2000      	movs	r0, #0
 8000ddc:	6360      	str	r0, [r4, #52]	; 0x34
 8000dde:	e7bc      	b.n	8000d5a <__sflush_r+0x1a>
 8000de0:	2301      	movs	r3, #1
 8000de2:	0028      	movs	r0, r5
 8000de4:	47b8      	blx	r7
 8000de6:	1c43      	adds	r3, r0, #1
 8000de8:	d1c6      	bne.n	8000d78 <__sflush_r+0x38>
 8000dea:	682b      	ldr	r3, [r5, #0]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d0c3      	beq.n	8000d78 <__sflush_r+0x38>
 8000df0:	2b1d      	cmp	r3, #29
 8000df2:	d001      	beq.n	8000df8 <__sflush_r+0xb8>
 8000df4:	2b16      	cmp	r3, #22
 8000df6:	d101      	bne.n	8000dfc <__sflush_r+0xbc>
 8000df8:	602e      	str	r6, [r5, #0]
 8000dfa:	e7ad      	b.n	8000d58 <__sflush_r+0x18>
 8000dfc:	89a2      	ldrh	r2, [r4, #12]
 8000dfe:	2340      	movs	r3, #64	; 0x40
 8000e00:	4313      	orrs	r3, r2
 8000e02:	81a3      	strh	r3, [r4, #12]
 8000e04:	e7a9      	b.n	8000d5a <__sflush_r+0x1a>
 8000e06:	690e      	ldr	r6, [r1, #16]
 8000e08:	2e00      	cmp	r6, #0
 8000e0a:	d0a5      	beq.n	8000d58 <__sflush_r+0x18>
 8000e0c:	680f      	ldr	r7, [r1, #0]
 8000e0e:	600e      	str	r6, [r1, #0]
 8000e10:	1bba      	subs	r2, r7, r6
 8000e12:	9201      	str	r2, [sp, #4]
 8000e14:	2200      	movs	r2, #0
 8000e16:	079b      	lsls	r3, r3, #30
 8000e18:	d100      	bne.n	8000e1c <__sflush_r+0xdc>
 8000e1a:	694a      	ldr	r2, [r1, #20]
 8000e1c:	60a2      	str	r2, [r4, #8]
 8000e1e:	9b01      	ldr	r3, [sp, #4]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	dd99      	ble.n	8000d58 <__sflush_r+0x18>
 8000e24:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000e26:	0032      	movs	r2, r6
 8000e28:	001f      	movs	r7, r3
 8000e2a:	0028      	movs	r0, r5
 8000e2c:	9b01      	ldr	r3, [sp, #4]
 8000e2e:	6a21      	ldr	r1, [r4, #32]
 8000e30:	47b8      	blx	r7
 8000e32:	2800      	cmp	r0, #0
 8000e34:	dc06      	bgt.n	8000e44 <__sflush_r+0x104>
 8000e36:	2340      	movs	r3, #64	; 0x40
 8000e38:	2001      	movs	r0, #1
 8000e3a:	89a2      	ldrh	r2, [r4, #12]
 8000e3c:	4240      	negs	r0, r0
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	81a3      	strh	r3, [r4, #12]
 8000e42:	e78a      	b.n	8000d5a <__sflush_r+0x1a>
 8000e44:	9b01      	ldr	r3, [sp, #4]
 8000e46:	1836      	adds	r6, r6, r0
 8000e48:	1a1b      	subs	r3, r3, r0
 8000e4a:	9301      	str	r3, [sp, #4]
 8000e4c:	e7e7      	b.n	8000e1e <__sflush_r+0xde>
 8000e4e:	46c0      	nop			; (mov r8, r8)
 8000e50:	dfbffffe 	.word	0xdfbffffe

08000e54 <_fflush_r>:
 8000e54:	690b      	ldr	r3, [r1, #16]
 8000e56:	b570      	push	{r4, r5, r6, lr}
 8000e58:	0005      	movs	r5, r0
 8000e5a:	000c      	movs	r4, r1
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d102      	bne.n	8000e66 <_fflush_r+0x12>
 8000e60:	2500      	movs	r5, #0
 8000e62:	0028      	movs	r0, r5
 8000e64:	bd70      	pop	{r4, r5, r6, pc}
 8000e66:	2800      	cmp	r0, #0
 8000e68:	d004      	beq.n	8000e74 <_fflush_r+0x20>
 8000e6a:	6a03      	ldr	r3, [r0, #32]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d101      	bne.n	8000e74 <_fflush_r+0x20>
 8000e70:	f7ff fc5e 	bl	8000730 <__sinit>
 8000e74:	220c      	movs	r2, #12
 8000e76:	5ea3      	ldrsh	r3, [r4, r2]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d0f1      	beq.n	8000e60 <_fflush_r+0xc>
 8000e7c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000e7e:	07d2      	lsls	r2, r2, #31
 8000e80:	d404      	bmi.n	8000e8c <_fflush_r+0x38>
 8000e82:	059b      	lsls	r3, r3, #22
 8000e84:	d402      	bmi.n	8000e8c <_fflush_r+0x38>
 8000e86:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000e88:	f7ff fe59 	bl	8000b3e <__retarget_lock_acquire_recursive>
 8000e8c:	0028      	movs	r0, r5
 8000e8e:	0021      	movs	r1, r4
 8000e90:	f7ff ff56 	bl	8000d40 <__sflush_r>
 8000e94:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000e96:	0005      	movs	r5, r0
 8000e98:	07db      	lsls	r3, r3, #31
 8000e9a:	d4e2      	bmi.n	8000e62 <_fflush_r+0xe>
 8000e9c:	89a3      	ldrh	r3, [r4, #12]
 8000e9e:	059b      	lsls	r3, r3, #22
 8000ea0:	d4df      	bmi.n	8000e62 <_fflush_r+0xe>
 8000ea2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000ea4:	f7ff fe4c 	bl	8000b40 <__retarget_lock_release_recursive>
 8000ea8:	e7db      	b.n	8000e62 <_fflush_r+0xe>
	...

08000eac <__swhatbuf_r>:
 8000eac:	b570      	push	{r4, r5, r6, lr}
 8000eae:	000e      	movs	r6, r1
 8000eb0:	001d      	movs	r5, r3
 8000eb2:	230e      	movs	r3, #14
 8000eb4:	5ec9      	ldrsh	r1, [r1, r3]
 8000eb6:	0014      	movs	r4, r2
 8000eb8:	b096      	sub	sp, #88	; 0x58
 8000eba:	2900      	cmp	r1, #0
 8000ebc:	da0c      	bge.n	8000ed8 <__swhatbuf_r+0x2c>
 8000ebe:	89b2      	ldrh	r2, [r6, #12]
 8000ec0:	2380      	movs	r3, #128	; 0x80
 8000ec2:	0011      	movs	r1, r2
 8000ec4:	4019      	ands	r1, r3
 8000ec6:	421a      	tst	r2, r3
 8000ec8:	d013      	beq.n	8000ef2 <__swhatbuf_r+0x46>
 8000eca:	2100      	movs	r1, #0
 8000ecc:	3b40      	subs	r3, #64	; 0x40
 8000ece:	2000      	movs	r0, #0
 8000ed0:	6029      	str	r1, [r5, #0]
 8000ed2:	6023      	str	r3, [r4, #0]
 8000ed4:	b016      	add	sp, #88	; 0x58
 8000ed6:	bd70      	pop	{r4, r5, r6, pc}
 8000ed8:	466a      	mov	r2, sp
 8000eda:	f000 f84d 	bl	8000f78 <_fstat_r>
 8000ede:	2800      	cmp	r0, #0
 8000ee0:	dbed      	blt.n	8000ebe <__swhatbuf_r+0x12>
 8000ee2:	23f0      	movs	r3, #240	; 0xf0
 8000ee4:	9901      	ldr	r1, [sp, #4]
 8000ee6:	021b      	lsls	r3, r3, #8
 8000ee8:	4019      	ands	r1, r3
 8000eea:	4b03      	ldr	r3, [pc, #12]	; (8000ef8 <__swhatbuf_r+0x4c>)
 8000eec:	18c9      	adds	r1, r1, r3
 8000eee:	424b      	negs	r3, r1
 8000ef0:	4159      	adcs	r1, r3
 8000ef2:	2380      	movs	r3, #128	; 0x80
 8000ef4:	00db      	lsls	r3, r3, #3
 8000ef6:	e7ea      	b.n	8000ece <__swhatbuf_r+0x22>
 8000ef8:	ffffe000 	.word	0xffffe000

08000efc <__smakebuf_r>:
 8000efc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000efe:	2602      	movs	r6, #2
 8000f00:	898b      	ldrh	r3, [r1, #12]
 8000f02:	0005      	movs	r5, r0
 8000f04:	000c      	movs	r4, r1
 8000f06:	4233      	tst	r3, r6
 8000f08:	d006      	beq.n	8000f18 <__smakebuf_r+0x1c>
 8000f0a:	0023      	movs	r3, r4
 8000f0c:	3347      	adds	r3, #71	; 0x47
 8000f0e:	6023      	str	r3, [r4, #0]
 8000f10:	6123      	str	r3, [r4, #16]
 8000f12:	2301      	movs	r3, #1
 8000f14:	6163      	str	r3, [r4, #20]
 8000f16:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8000f18:	466a      	mov	r2, sp
 8000f1a:	ab01      	add	r3, sp, #4
 8000f1c:	f7ff ffc6 	bl	8000eac <__swhatbuf_r>
 8000f20:	9900      	ldr	r1, [sp, #0]
 8000f22:	0007      	movs	r7, r0
 8000f24:	0028      	movs	r0, r5
 8000f26:	f7ff fe79 	bl	8000c1c <_malloc_r>
 8000f2a:	2800      	cmp	r0, #0
 8000f2c:	d108      	bne.n	8000f40 <__smakebuf_r+0x44>
 8000f2e:	220c      	movs	r2, #12
 8000f30:	5ea3      	ldrsh	r3, [r4, r2]
 8000f32:	059a      	lsls	r2, r3, #22
 8000f34:	d4ef      	bmi.n	8000f16 <__smakebuf_r+0x1a>
 8000f36:	2203      	movs	r2, #3
 8000f38:	4393      	bics	r3, r2
 8000f3a:	431e      	orrs	r6, r3
 8000f3c:	81a6      	strh	r6, [r4, #12]
 8000f3e:	e7e4      	b.n	8000f0a <__smakebuf_r+0xe>
 8000f40:	2380      	movs	r3, #128	; 0x80
 8000f42:	89a2      	ldrh	r2, [r4, #12]
 8000f44:	6020      	str	r0, [r4, #0]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	81a3      	strh	r3, [r4, #12]
 8000f4a:	9b00      	ldr	r3, [sp, #0]
 8000f4c:	6120      	str	r0, [r4, #16]
 8000f4e:	6163      	str	r3, [r4, #20]
 8000f50:	9b01      	ldr	r3, [sp, #4]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d00c      	beq.n	8000f70 <__smakebuf_r+0x74>
 8000f56:	0028      	movs	r0, r5
 8000f58:	230e      	movs	r3, #14
 8000f5a:	5ee1      	ldrsh	r1, [r4, r3]
 8000f5c:	f000 f81e 	bl	8000f9c <_isatty_r>
 8000f60:	2800      	cmp	r0, #0
 8000f62:	d005      	beq.n	8000f70 <__smakebuf_r+0x74>
 8000f64:	2303      	movs	r3, #3
 8000f66:	89a2      	ldrh	r2, [r4, #12]
 8000f68:	439a      	bics	r2, r3
 8000f6a:	3b02      	subs	r3, #2
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	81a3      	strh	r3, [r4, #12]
 8000f70:	89a3      	ldrh	r3, [r4, #12]
 8000f72:	433b      	orrs	r3, r7
 8000f74:	81a3      	strh	r3, [r4, #12]
 8000f76:	e7ce      	b.n	8000f16 <__smakebuf_r+0x1a>

08000f78 <_fstat_r>:
 8000f78:	2300      	movs	r3, #0
 8000f7a:	b570      	push	{r4, r5, r6, lr}
 8000f7c:	4d06      	ldr	r5, [pc, #24]	; (8000f98 <_fstat_r+0x20>)
 8000f7e:	0004      	movs	r4, r0
 8000f80:	0008      	movs	r0, r1
 8000f82:	0011      	movs	r1, r2
 8000f84:	602b      	str	r3, [r5, #0]
 8000f86:	f7ff f9ee 	bl	8000366 <_fstat>
 8000f8a:	1c43      	adds	r3, r0, #1
 8000f8c:	d103      	bne.n	8000f96 <_fstat_r+0x1e>
 8000f8e:	682b      	ldr	r3, [r5, #0]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d000      	beq.n	8000f96 <_fstat_r+0x1e>
 8000f94:	6023      	str	r3, [r4, #0]
 8000f96:	bd70      	pop	{r4, r5, r6, pc}
 8000f98:	200001bc 	.word	0x200001bc

08000f9c <_isatty_r>:
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	b570      	push	{r4, r5, r6, lr}
 8000fa0:	4d06      	ldr	r5, [pc, #24]	; (8000fbc <_isatty_r+0x20>)
 8000fa2:	0004      	movs	r4, r0
 8000fa4:	0008      	movs	r0, r1
 8000fa6:	602b      	str	r3, [r5, #0]
 8000fa8:	f7ff f9eb 	bl	8000382 <_isatty>
 8000fac:	1c43      	adds	r3, r0, #1
 8000fae:	d103      	bne.n	8000fb8 <_isatty_r+0x1c>
 8000fb0:	682b      	ldr	r3, [r5, #0]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d000      	beq.n	8000fb8 <_isatty_r+0x1c>
 8000fb6:	6023      	str	r3, [r4, #0]
 8000fb8:	bd70      	pop	{r4, r5, r6, pc}
 8000fba:	46c0      	nop			; (mov r8, r8)
 8000fbc:	200001bc 	.word	0x200001bc

08000fc0 <_sbrk_r>:
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	b570      	push	{r4, r5, r6, lr}
 8000fc4:	4d06      	ldr	r5, [pc, #24]	; (8000fe0 <_sbrk_r+0x20>)
 8000fc6:	0004      	movs	r4, r0
 8000fc8:	0008      	movs	r0, r1
 8000fca:	602b      	str	r3, [r5, #0]
 8000fcc:	f7ff f9ee 	bl	80003ac <_sbrk>
 8000fd0:	1c43      	adds	r3, r0, #1
 8000fd2:	d103      	bne.n	8000fdc <_sbrk_r+0x1c>
 8000fd4:	682b      	ldr	r3, [r5, #0]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d000      	beq.n	8000fdc <_sbrk_r+0x1c>
 8000fda:	6023      	str	r3, [r4, #0]
 8000fdc:	bd70      	pop	{r4, r5, r6, pc}
 8000fde:	46c0      	nop			; (mov r8, r8)
 8000fe0:	200001bc 	.word	0x200001bc

08000fe4 <_init>:
 8000fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fe6:	46c0      	nop			; (mov r8, r8)
 8000fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fea:	bc08      	pop	{r3}
 8000fec:	469e      	mov	lr, r3
 8000fee:	4770      	bx	lr

08000ff0 <_fini>:
 8000ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ff2:	46c0      	nop			; (mov r8, r8)
 8000ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ff6:	bc08      	pop	{r3}
 8000ff8:	469e      	mov	lr, r3
 8000ffa:	4770      	bx	lr
